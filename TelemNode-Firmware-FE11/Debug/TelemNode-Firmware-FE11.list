
TelemNode-Firmware-FE11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005008  08005008  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005008  08005008  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005008  08005008  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005008  08005008  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800500c  0800500c  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005010  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  0800501c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800501c  00007158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0c3  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025af  00000000  00000000  000140f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  000166a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c6  00000000  00000000  00017378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001807b  00000000  00000000  00017d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1a4  00000000  00000000  0002fdb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c058  00000000  00000000  0003ef5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cafb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  000caff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000ce598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fb0 	.word	0x08004fb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004fb0 	.word	0x08004fb0

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2iz>:
 8000d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d18:	d30f      	bcc.n	8000d3a <__aeabi_f2iz+0x2a>
 8000d1a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d90d      	bls.n	8000d40 <__aeabi_f2iz+0x30>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d2c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d30:	fa23 f002 	lsr.w	r0, r3, r2
 8000d34:	bf18      	it	ne
 8000d36:	4240      	negne	r0, r0
 8000d38:	4770      	bx	lr
 8000d3a:	f04f 0000 	mov.w	r0, #0
 8000d3e:	4770      	bx	lr
 8000d40:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d44:	d101      	bne.n	8000d4a <__aeabi_f2iz+0x3a>
 8000d46:	0242      	lsls	r2, r0, #9
 8000d48:	d105      	bne.n	8000d56 <__aeabi_f2iz+0x46>
 8000d4a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	4770      	bx	lr

08000d5c <ADC_Input_Init>:
 */

#include "adc.h"

void ADC_Input_Init(ADC_Input_t* adc, ADC_HandleTypeDef* h_adc, uint32_t channel, uint32_t rank, uint32_t sample_time)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
	adc->h_adc = h_adc;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	601a      	str	r2, [r3, #0]
	adc->sConfig.Channel = channel;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	605a      	str	r2, [r3, #4]
	adc->sConfig.Rank = rank;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	609a      	str	r2, [r3, #8]
	adc->sConfig.SamplingTime = sample_time;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	60da      	str	r2, [r3, #12]
	adc->value = 0;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2200      	movs	r2, #0
 8000d86:	821a      	strh	r2, [r3, #16]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <ADC_Measure>:

HAL_StatusTypeDef ADC_Measure(ADC_Input_t* adc, uint32_t timeout)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_res = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

	// select ADC channel
	hal_res = HAL_ADC_ConfigChannel(adc->h_adc, &adc->sConfig);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3304      	adds	r3, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4610      	mov	r0, r2
 8000dac:	f001 fa7c 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <ADC_Measure+0x2c>
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	e022      	b.n	8000e04 <ADC_Measure+0x72>

	// begin conversion
	hal_res = HAL_ADC_Start(adc->h_adc);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 f8b0 	bl	8001f28 <HAL_ADC_Start>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <ADC_Measure+0x44>
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	e016      	b.n	8000e04 <ADC_Measure+0x72>

	// wait for conversion to complete
	hal_res = HAL_ADC_PollForConversion(adc->h_adc, timeout);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 f951 	bl	8002084 <HAL_ADC_PollForConversion>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if(hal_res != HAL_OK) return hal_res;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <ADC_Measure+0x5e>
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	e009      	b.n	8000e04 <ADC_Measure+0x72>

	adc->value = HAL_ADC_GetValue(adc->h_adc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fa4b 	bl	8002290 <HAL_ADC_GetValue>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	821a      	strh	r2, [r3, #16]
	return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <CAN_Init>:
extern CAN_HandleTypeDef hcan;

CAN_DATA_t can_data;

void CAN_Init()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
	// Filter vehicle state messages into FIFO0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
	can_filter.SlaveStartFilterBank = 28;
 8000e16:	231c      	movs	r3, #28
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
	can_filter.FilterBank = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
	if (HAL_CAN_ConfigFilter(&hcan, &can_filter) != HAL_OK) {
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480e      	ldr	r0, [pc, #56]	@ (8000e78 <CAN_Init+0x6c>)
 8000e40:	f001 fcc0 	bl	80027c4 <HAL_CAN_ConfigFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <CAN_Init+0x42>
	  Error_Handler();
 8000e4a:	f000 fad7 	bl	80013fc <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000e4e:	2102      	movs	r1, #2
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <CAN_Init+0x6c>)
 8000e52:	f001 ffe8 	bl	8002e26 <HAL_CAN_ActivateNotification>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <CAN_Init+0x54>
		Error_Handler();
 8000e5c:	f000 face 	bl	80013fc <Error_Handler>
	}
	if ( HAL_CAN_Start(&hcan) != HAL_OK) {
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <CAN_Init+0x6c>)
 8000e62:	f001 fd78 	bl	8002956 <HAL_CAN_Start>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <CAN_Init+0x64>
		Error_Handler();
 8000e6c:	f000 fac6 	bl	80013fc <Error_Handler>
	}
}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	@ 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000084 	.word	0x20000084

08000e7c <CAN_Send>:

HAL_StatusTypeDef CAN_Send(uint32_t id, uint8_t* data, uint8_t len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	4613      	mov	r3, r2
 8000e88:	71fb      	strb	r3, [r7, #7]
	static uint32_t TxMailbox;
	static CAN_TxHeaderTypeDef msg_hdr;
	msg_hdr.IDE = CAN_ID_STD;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <CAN_Send+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
	msg_hdr.StdId = id;
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <CAN_Send+0x4c>)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6013      	str	r3, [r2, #0]
	msg_hdr.RTR = CAN_RTR_DATA;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <CAN_Send+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
	msg_hdr.DLC = len;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <CAN_Send+0x4c>)
 8000ea0:	6113      	str	r3, [r2, #16]

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) return HAL_OK;
 8000ea2:	480a      	ldr	r0, [pc, #40]	@ (8000ecc <CAN_Send+0x50>)
 8000ea4:	f001 fe6a 	bl	8002b7c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <CAN_Send+0x36>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e006      	b.n	8000ec0 <CAN_Send+0x44>
	return HAL_CAN_AddTxMessage(&hcan, &msg_hdr, data, &TxMailbox);
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <CAN_Send+0x54>)
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	4904      	ldr	r1, [pc, #16]	@ (8000ec8 <CAN_Send+0x4c>)
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <CAN_Send+0x50>)
 8000eba:	f001 fd90 	bl	80029de <HAL_CAN_AddTxMessage>
 8000ebe:	4603      	mov	r3, r0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000038 	.word	0x20000038
 8000ecc:	20000084 	.word	0x20000084
 8000ed0:	20000050 	.word	0x20000050

08000ed4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan_ptr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef can_rx_header;
	uint8_t can_rx_data[8];

 	if (HAL_CAN_GetRxMessage(hcan_ptr, CAN_RX_FIFO0, &can_rx_header, can_rx_data) != HAL_OK) {
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	f107 0214 	add.w	r2, r7, #20
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f001 fe7c 	bl	8002be4 <HAL_CAN_GetRxMessage>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Error_Handler();
 8000ef2:	f000 fa83 	bl	80013fc <Error_Handler>
	}

	switch(can_rx_header.StdId)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f240 7266 	movw	r2, #1894	@ 0x766
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d012      	beq.n	8000f26 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000f00:	f240 7266 	movw	r2, #1894	@ 0x766
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d877      	bhi.n	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 8000f08:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 8000f0c:	d00f      	beq.n	8000f2e <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8000f0e:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
 8000f12:	d871      	bhi.n	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 8000f14:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f16:	d067      	beq.n	8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
 8000f18:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f1a:	d86d      	bhi.n	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
 8000f1c:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f1e:	d00a      	beq.n	8000f36 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 8000f20:	2ba2      	cmp	r3, #162	@ 0xa2
 8000f22:	d052      	beq.n	8000fca <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		case TORQUE_REQUEST:
			can_data.inverter_enable = can_rx_data[5] & 0x01;
			break;

	}
}
 8000f24:	e068      	b.n	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
			can_data.vcu_state = can_rx_data[5];
 8000f26:	7c7a      	ldrb	r2, [r7, #17]
 8000f28:	4b35      	ldr	r3, [pc, #212]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f2a:	701a      	strb	r2, [r3, #0]
			break;
 8000f2c:	e064      	b.n	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
			can_data.bms_temp = can_rx_data[0];
 8000f2e:	7b3a      	ldrb	r2, [r7, #12]
 8000f30:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f32:	705a      	strb	r2, [r3, #1]
			break;
 8000f34:	e060      	b.n	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
			can_data.mc_temp_module_a = (can_rx_data[1] << 8);
 8000f36:	7b7b      	ldrb	r3, [r7, #13]
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f3e:	805a      	strh	r2, [r3, #2]
			can_data.mc_temp_module_a |= can_rx_data[0];
 8000f40:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f42:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f46:	7b3b      	ldrb	r3, [r7, #12]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f50:	805a      	strh	r2, [r3, #2]
			can_data.mc_temp_module_c = (can_rx_data[3] << 8);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f5a:	80da      	strh	r2, [r3, #6]
			can_data.mc_temp_module_c |= can_rx_data[2];
 8000f5c:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f5e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	4b25      	ldr	r3, [pc, #148]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f6c:	80da      	strh	r2, [r3, #6]
			can_data.mc_temp_module_c = (can_rx_data[5] << 8);
 8000f6e:	7c7b      	ldrb	r3, [r7, #17]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	4b22      	ldr	r3, [pc, #136]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f76:	80da      	strh	r2, [r3, #6]
			can_data.mc_temp_module_c |= can_rx_data[4];
 8000f78:	4b21      	ldr	r3, [pc, #132]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f7a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000f7e:	7c3b      	ldrb	r3, [r7, #16]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f88:	80da      	strh	r2, [r3, #6]
			can_data.mc_temp_max = can_data.mc_temp_module_a;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f8c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f92:	811a      	strh	r2, [r3, #8]
			if(can_data.mc_temp_module_b > can_data.mc_temp_max){
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f96:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000f9a:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000f9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dd04      	ble.n	8000fae <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
				can_data.mc_temp_max = can_data.mc_temp_module_b;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fa6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fac:	811a      	strh	r2, [r3, #8]
			if(can_data.mc_temp_module_c > can_data.mc_temp_max){
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fb0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dd1b      	ble.n	8000ff6 <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
				can_data.mc_temp_max = can_data.mc_temp_module_c;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fc0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fc6:	811a      	strh	r2, [r3, #8]
			break;
 8000fc8:	e015      	b.n	8000ff6 <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
			can_data.motor_temp = (can_rx_data[5] << 8);
 8000fca:	7c7b      	ldrb	r3, [r7, #17]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fd2:	815a      	strh	r2, [r3, #10]
			can_data.motor_temp |= can_rx_data[4];
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fd6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000fda:	7c3b      	ldrb	r3, [r7, #16]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000fe4:	815a      	strh	r2, [r3, #10]
			break;
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
			can_data.inverter_enable = can_rx_data[5] & 0x01;
 8000fe8:	7c7b      	ldrb	r3, [r7, #17]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000ff2:	731a      	strb	r2, [r3, #12]
			break;
 8000ff4:	e000      	b.n	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
			break;
 8000ff6:	bf00      	nop
}
 8000ff8:	bf00      	nop
 8000ffa:	3730      	adds	r7, #48	@ 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000028 	.word	0x20000028

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f000 fe30 	bl	8001c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f80d 	bl	800102a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001010:	f000 f988 	bl	8001324 <MX_GPIO_Init>
  MX_CAN_Init();
 8001014:	f000 f8a4 	bl	8001160 <MX_CAN_Init>
  MX_TIM1_Init();
 8001018:	f000 f8d8 	bl	80011cc <MX_TIM1_Init>
  MX_ADC1_Init();
 800101c:	f000 f862 	bl	80010e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  TelemNode_Init();
 8001020:	f000 fbd0 	bl	80017c4 <TelemNode_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TelemNode_Update();
 8001024:	f000 fc0c 	bl	8001840 <TelemNode_Update>
 8001028:	e7fc      	b.n	8001024 <main+0x20>

0800102a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b094      	sub	sp, #80	@ 0x50
 800102e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001030:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001034:	2228      	movs	r2, #40	@ 0x28
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f003 ff8c 	bl	8004f56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800105a:	2301      	movs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800105e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001064:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106a:	2301      	movs	r3, #1
 800106c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106e:	2302      	movs	r3, #2
 8001070:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001072:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001076:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001078:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800107c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fbda 	bl	800383c <HAL_RCC_OscConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800108e:	f000 f9b5 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2102      	movs	r1, #2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fe46 	bl	8003d40 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ba:	f000 f99f 	bl	80013fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010be:	2302      	movs	r3, #2
 80010c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80010c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 ffb4 	bl	8004038 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010d6:	f000 f991 	bl	80013fc <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3750      	adds	r7, #80	@ 0x50
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f4:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <MX_ADC1_Init+0x74>)
 80010f6:	4a19      	ldr	r2, [pc, #100]	@ (800115c <MX_ADC1_Init+0x78>)
 80010f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <MX_ADC1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_ADC1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_ADC1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_ADC1_Init+0x74>)
 800110e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001112:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_ADC1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_ADC1_Init+0x74>)
 800111c:	2201      	movs	r2, #1
 800111e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	480d      	ldr	r0, [pc, #52]	@ (8001158 <MX_ADC1_Init+0x74>)
 8001122:	f000 fe29 	bl	8001d78 <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800112c:	f000 f966 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2301      	movs	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_ADC1_Init+0x74>)
 8001142:	f001 f8b1 	bl	80022a8 <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800114c:	f000 f956 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000054 	.word	0x20000054
 800115c:	40012400 	.word	0x40012400

08001160 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001164:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_CAN_Init+0x64>)
 8001166:	4a18      	ldr	r2, [pc, #96]	@ (80011c8 <MX_CAN_Init+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 800116a:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_CAN_Init+0x64>)
 800116c:	2212      	movs	r2, #18
 800116e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_CAN_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <MX_CAN_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_CAN_Init+0x64>)
 800117e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001182:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_CAN_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_CAN_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_CAN_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <MX_CAN_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_CAN_Init+0x64>)
 800119e:	2201      	movs	r2, #1
 80011a0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <MX_CAN_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_CAN_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_CAN_Init+0x64>)
 80011b0:	f001 fa0d 	bl	80025ce <HAL_CAN_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80011ba:	f000 f91f 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000084 	.word	0x20000084
 80011c8:	40006400 	.word	0x40006400

080011cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b096      	sub	sp, #88	@ 0x58
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2220      	movs	r2, #32
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fea6 	bl	8004f56 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120a:	4b44      	ldr	r3, [pc, #272]	@ (800131c <MX_TIM1_Init+0x150>)
 800120c:	4a44      	ldr	r2, [pc, #272]	@ (8001320 <MX_TIM1_Init+0x154>)
 800120e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001210:	4b42      	ldr	r3, [pc, #264]	@ (800131c <MX_TIM1_Init+0x150>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <MX_TIM1_Init+0x150>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 800121c:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <MX_TIM1_Init+0x150>)
 800121e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001222:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <MX_TIM1_Init+0x150>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122a:	4b3c      	ldr	r3, [pc, #240]	@ (800131c <MX_TIM1_Init+0x150>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b3a      	ldr	r3, [pc, #232]	@ (800131c <MX_TIM1_Init+0x150>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001236:	4839      	ldr	r0, [pc, #228]	@ (800131c <MX_TIM1_Init+0x150>)
 8001238:	f003 f86a 	bl	8004310 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001242:	f000 f8db 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001250:	4619      	mov	r1, r3
 8001252:	4832      	ldr	r0, [pc, #200]	@ (800131c <MX_TIM1_Init+0x150>)
 8001254:	f003 f9c6 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800125e:	f000 f8cd 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001262:	482e      	ldr	r0, [pc, #184]	@ (800131c <MX_TIM1_Init+0x150>)
 8001264:	f003 f8a3 	bl	80043ae <HAL_TIM_PWM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800126e:	f000 f8c5 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800127e:	4619      	mov	r1, r3
 8001280:	4826      	ldr	r0, [pc, #152]	@ (800131c <MX_TIM1_Init+0x150>)
 8001282:	f003 fd95 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800128c:	f000 f8b6 	bl	80013fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001290:	2360      	movs	r3, #96	@ 0x60
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	4819      	ldr	r0, [pc, #100]	@ (800131c <MX_TIM1_Init+0x150>)
 80012b6:	f003 f8d3 	bl	8004460 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012c0:	f000 f89c 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c8:	2204      	movs	r2, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4813      	ldr	r0, [pc, #76]	@ (800131c <MX_TIM1_Init+0x150>)
 80012ce:	f003 f8c7 	bl	8004460 <HAL_TIM_PWM_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012d8:	f000 f890 	bl	80013fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4807      	ldr	r0, [pc, #28]	@ (800131c <MX_TIM1_Init+0x150>)
 8001300:	f003 fdb4 	bl	8004e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800130a:	f000 f877 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800130e:	4803      	ldr	r0, [pc, #12]	@ (800131c <MX_TIM1_Init+0x150>)
 8001310:	f000 f9d8 	bl	80016c4 <HAL_TIM_MspPostInit>

}
 8001314:	bf00      	nop
 8001316:	3758      	adds	r7, #88	@ 0x58
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200000ac 	.word	0x200000ac
 8001320:	40012c00 	.word	0x40012c00

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001338:	4b2c      	ldr	r3, [pc, #176]	@ (80013ec <MX_GPIO_Init+0xc8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a2b      	ldr	r2, [pc, #172]	@ (80013ec <MX_GPIO_Init+0xc8>)
 800133e:	f043 0320 	orr.w	r3, r3, #32
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <MX_GPIO_Init+0xc8>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <MX_GPIO_Init+0xc8>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a25      	ldr	r2, [pc, #148]	@ (80013ec <MX_GPIO_Init+0xc8>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <MX_GPIO_Init+0xc8>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_GPIO_Init+0xc8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <MX_GPIO_Init+0xc8>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_GPIO_Init+0xc8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001386:	481a      	ldr	r0, [pc, #104]	@ (80013f0 <MX_GPIO_Init+0xcc>)
 8001388:	f002 fa28 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2302      	movs	r3, #2
 800139c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <MX_GPIO_Init+0xcc>)
 80013a6:	f002 f895 	bl	80034d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80013aa:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_GPIO_Init+0xd0>)
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <MX_GPIO_Init+0xd4>)
 80013c0:	f002 f888 	bl	80034d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	2017      	movs	r0, #23
 80013ca:	f002 f84c 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013ce:	2017      	movs	r0, #23
 80013d0:	f002 f865 	bl	800349e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2028      	movs	r0, #40	@ 0x28
 80013da:	f002 f844 	bl	8003466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013de:	2028      	movs	r0, #40	@ 0x28
 80013e0:	f002 f85d 	bl	800349e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	10110000 	.word	0x10110000
 80013f8:	40010800 	.word	0x40010800

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <PWM_Init>:
 */

#include "pwm.h"

HAL_StatusTypeDef PWM_Init(PWM_Output_t* pwm, TIM_HandleTypeDef* h_tim, uint32_t channel)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	pwm->h_tim = h_tim;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	601a      	str	r2, [r3, #0]
	pwm->channel = channel;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	605a      	str	r2, [r3, #4]

	return HAL_TIMEx_PWMN_Start(h_tim, channel);
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	68b8      	ldr	r0, [r7, #8]
 8001424:	f003 fc26 	bl	8004c74 <HAL_TIMEx_PWMN_Start>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <PWM_SetDutyCycle>:

void PWM_SetDutyCycle(PWM_Output_t* pwm, uint8_t duty)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
	uint32_t ccr = pwm->h_tim->Instance->ARR * duty / 255;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4a22      	ldr	r2, [pc, #136]	@ (80014d8 <PWM_SetDutyCycle+0xa4>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	09db      	lsrs	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

	switch(pwm->channel)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d835      	bhi.n	80014cc <PWM_SetDutyCycle+0x98>
 8001460:	a201      	add	r2, pc, #4	@ (adr r2, 8001468 <PWM_SetDutyCycle+0x34>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	0800149d 	.word	0x0800149d
 800146c:	080014cd 	.word	0x080014cd
 8001470:	080014cd 	.word	0x080014cd
 8001474:	080014cd 	.word	0x080014cd
 8001478:	080014a9 	.word	0x080014a9
 800147c:	080014cd 	.word	0x080014cd
 8001480:	080014cd 	.word	0x080014cd
 8001484:	080014cd 	.word	0x080014cd
 8001488:	080014b5 	.word	0x080014b5
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014cd 	.word	0x080014cd
 8001494:	080014cd 	.word	0x080014cd
 8001498:	080014c1 	.word	0x080014c1
	{
		case TIM_CHANNEL_1:
			pwm->h_tim->Instance->CCR1 = ccr;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80014a6:	e011      	b.n	80014cc <PWM_SetDutyCycle+0x98>
		case TIM_CHANNEL_2:
			pwm->h_tim->Instance->CCR2 = ccr;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80014b2:	e00b      	b.n	80014cc <PWM_SetDutyCycle+0x98>
		case TIM_CHANNEL_3:
			pwm->h_tim->Instance->CCR3 = ccr;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80014be:	e005      	b.n	80014cc <PWM_SetDutyCycle+0x98>
		case TIM_CHANNEL_4:
			pwm->h_tim->Instance->CCR4 = ccr;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80014ca:	bf00      	nop
		default:
			//YO WTF?
	}
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	80808081 	.word	0x80808081

080014dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_MspInit+0x5c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_MspInit+0x5c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6193      	str	r3, [r2, #24]
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_MspInit+0x5c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_MspInit+0x5c>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_MspInit+0x5c>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001504:	61d3      	str	r3, [r2, #28]
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <HAL_MspInit+0x5c>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_MspInit+0x60>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_MspInit+0x60>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000
 800153c:	40010000 	.word	0x40010000

08001540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <HAL_ADC_MspInit+0x6c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d121      	bne.n	80015a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_ADC_MspInit+0x70>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <HAL_ADC_MspInit+0x70>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_ADC_MspInit+0x70>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <HAL_ADC_MspInit+0x70>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a0c      	ldr	r2, [pc, #48]	@ (80015b0 <HAL_ADC_MspInit+0x70>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_ADC_MspInit+0x70>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = TEMP_INLET_Pin|TEMP_OUTLET_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001590:	2333      	movs	r3, #51	@ 0x33
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001594:	2303      	movs	r3, #3
 8001596:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <HAL_ADC_MspInit+0x74>)
 80015a0:	f001 ff98 	bl	80034d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40012400 	.word	0x40012400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010800 	.word	0x40010800

080015b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a29      	ldr	r2, [pc, #164]	@ (8001678 <HAL_CAN_MspInit+0xc0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d14b      	bne.n	8001670 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <HAL_CAN_MspInit+0xc4>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	4a27      	ldr	r2, [pc, #156]	@ (800167c <HAL_CAN_MspInit+0xc4>)
 80015de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015e2:	61d3      	str	r3, [r2, #28]
 80015e4:	4b25      	ldr	r3, [pc, #148]	@ (800167c <HAL_CAN_MspInit+0xc4>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <HAL_CAN_MspInit+0xc4>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a21      	ldr	r2, [pc, #132]	@ (800167c <HAL_CAN_MspInit+0xc4>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <HAL_CAN_MspInit+0xc4>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4818      	ldr	r0, [pc, #96]	@ (8001680 <HAL_CAN_MspInit+0xc8>)
 800161e:	f001 ff59 	bl	80034d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4812      	ldr	r0, [pc, #72]	@ (8001680 <HAL_CAN_MspInit+0xc8>)
 8001638:	f001 ff4c 	bl	80034d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_CAN_MspInit+0xcc>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <HAL_CAN_MspInit+0xcc>)
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2014      	movs	r0, #20
 8001666:	f001 fefe 	bl	8003466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800166a:	2014      	movs	r0, #20
 800166c:	f001 ff17 	bl	800349e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	@ 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40006400 	.word	0x40006400
 800167c:	40021000 	.word	0x40021000
 8001680:	40010c00 	.word	0x40010c00
 8001684:	40010000 	.word	0x40010000

08001688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_TIM_Base_MspInit+0x34>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10b      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_TIM_Base_MspInit+0x38>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	4a08      	ldr	r2, [pc, #32]	@ (80016c0 <HAL_TIM_Base_MspInit+0x38>)
 80016a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a4:	6193      	str	r3, [r2, #24]
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_TIM_Base_MspInit+0x38>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40012c00 	.word	0x40012c00
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <HAL_TIM_MspPostInit+0x5c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d118      	bne.n	8001716 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_TIM_MspPostInit+0x60>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <HAL_TIM_MspPostInit+0x60>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_TIM_MspPostInit+0x60>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin|PWM_PUMP_Pin;
 80016fc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001700:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2302      	movs	r3, #2
 8001708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <HAL_TIM_MspPostInit+0x64>)
 8001712:	f001 fedf 	bl	80034d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40012c00 	.word	0x40012c00
 8001724:	40021000 	.word	0x40021000
 8001728:	40010c00 	.word	0x40010c00

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 fabc 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800178a:	f001 fb71 	bl	8002e70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000084 	.word	0x20000084

08001798 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800179c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017a0:	f002 f834 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80017ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80017b0:	f002 f82c 	bl	800380c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <TelemNode_Init>:
void set_fan_speed(uint8_t speed);
void set_pump_speed(uint8_t speed);
void update_pwm(int16_t inlet_temp);
void buzzerer();

void TelemNode_Init(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af02      	add	r7, sp, #8

	CAN_Init();
 80017ca:	f7ff fb1f 	bl	8000e0c <CAN_Init>

	ADC_Input_Init(&adc_inlet_temp, &hadc1, ADC_CHANNEL_4, ADC_REGULAR_RANK_1, ADC_SAMPLETIME_239CYCLES_5);
 80017ce:	2307      	movs	r3, #7
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2301      	movs	r3, #1
 80017d4:	2204      	movs	r2, #4
 80017d6:	4912      	ldr	r1, [pc, #72]	@ (8001820 <TelemNode_Init+0x5c>)
 80017d8:	4812      	ldr	r0, [pc, #72]	@ (8001824 <TelemNode_Init+0x60>)
 80017da:	f7ff fabf 	bl	8000d5c <ADC_Input_Init>
	ADC_Input_Init(&adc_outlet_temp, &hadc1, ADC_CHANNEL_5, ADC_REGULAR_RANK_1, ADC_SAMPLETIME_239CYCLES_5);
 80017de:	2307      	movs	r3, #7
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	2205      	movs	r2, #5
 80017e6:	490e      	ldr	r1, [pc, #56]	@ (8001820 <TelemNode_Init+0x5c>)
 80017e8:	480f      	ldr	r0, [pc, #60]	@ (8001828 <TelemNode_Init+0x64>)
 80017ea:	f7ff fab7 	bl	8000d5c <ADC_Input_Init>

	PWM_Init(&pwm_fan, &htim1, TIM_CHANNEL_1);
 80017ee:	2200      	movs	r2, #0
 80017f0:	490e      	ldr	r1, [pc, #56]	@ (800182c <TelemNode_Init+0x68>)
 80017f2:	480f      	ldr	r0, [pc, #60]	@ (8001830 <TelemNode_Init+0x6c>)
 80017f4:	f7ff fe08 	bl	8001408 <PWM_Init>
	PWM_Init(&pwm_pump, &htim1, TIM_CHANNEL_2);
 80017f8:	2204      	movs	r2, #4
 80017fa:	490c      	ldr	r1, [pc, #48]	@ (800182c <TelemNode_Init+0x68>)
 80017fc:	480d      	ldr	r0, [pc, #52]	@ (8001834 <TelemNode_Init+0x70>)
 80017fe:	f7ff fe03 	bl	8001408 <PWM_Init>

	WheelSpeed_Init(&wheel_rr);
 8001802:	480d      	ldr	r0, [pc, #52]	@ (8001838 <TelemNode_Init+0x74>)
 8001804:	f000 f9ce 	bl	8001ba4 <WheelSpeed_Init>
	WheelSpeed_Init(&wheel_rl);
 8001808:	480c      	ldr	r0, [pc, #48]	@ (800183c <TelemNode_Init+0x78>)
 800180a:	f000 f9cb 	bl	8001ba4 <WheelSpeed_Init>

	set_pump_speed(255);
 800180e:	20ff      	movs	r0, #255	@ 0xff
 8001810:	f000 f948 	bl	8001aa4 <set_pump_speed>
	set_fan_speed(0);
 8001814:	2000      	movs	r0, #0
 8001816:	f000 f957 	bl	8001ac8 <set_fan_speed>
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000054 	.word	0x20000054
 8001824:	200000f4 	.word	0x200000f4
 8001828:	20000108 	.word	0x20000108
 800182c:	200000ac 	.word	0x200000ac
 8001830:	2000011c 	.word	0x2000011c
 8001834:	20000124 	.word	0x20000124
 8001838:	2000012c 	.word	0x2000012c
 800183c:	20000138 	.word	0x20000138

08001840 <TelemNode_Update>:

void TelemNode_Update()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
	static uint8_t tx_data[8];

	ADC_Measure(&adc_inlet_temp, 1000);
 8001846:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800184a:	4842      	ldr	r0, [pc, #264]	@ (8001954 <TelemNode_Update+0x114>)
 800184c:	f7ff faa1 	bl	8000d92 <ADC_Measure>
	ADC_Measure(&adc_outlet_temp, 1000);
 8001850:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001854:	4840      	ldr	r0, [pc, #256]	@ (8001958 <TelemNode_Update+0x118>)
 8001856:	f7ff fa9c 	bl	8000d92 <ADC_Measure>

	int16_t inlet_temp = get_temp(adc_inlet_temp.value);
 800185a:	4b3e      	ldr	r3, [pc, #248]	@ (8001954 <TelemNode_Update+0x114>)
 800185c:	8a1b      	ldrh	r3, [r3, #16]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f8c2 	bl	80019e8 <get_temp>
 8001864:	4603      	mov	r3, r0
 8001866:	817b      	strh	r3, [r7, #10]
	int16_t outlet_temp = get_temp(adc_outlet_temp.value);
 8001868:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <TelemNode_Update+0x118>)
 800186a:	8a1b      	ldrh	r3, [r3, #16]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f8bb 	bl	80019e8 <get_temp>
 8001872:	4603      	mov	r3, r0
 8001874:	813b      	strh	r3, [r7, #8]

	tx_data[0] = HI8(inlet_temp);
 8001876:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800187a:	121b      	asrs	r3, r3, #8
 800187c:	b21b      	sxth	r3, r3
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b36      	ldr	r3, [pc, #216]	@ (800195c <TelemNode_Update+0x11c>)
 8001882:	701a      	strb	r2, [r3, #0]
	tx_data[1] = LO8(inlet_temp);
 8001884:	897b      	ldrh	r3, [r7, #10]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b34      	ldr	r3, [pc, #208]	@ (800195c <TelemNode_Update+0x11c>)
 800188a:	705a      	strb	r2, [r3, #1]
	tx_data[2] = HI8(outlet_temp);
 800188c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001890:	121b      	asrs	r3, r3, #8
 8001892:	b21b      	sxth	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b31      	ldr	r3, [pc, #196]	@ (800195c <TelemNode_Update+0x11c>)
 8001898:	709a      	strb	r2, [r3, #2]
	tx_data[3] = LO8(outlet_temp);
 800189a:	893b      	ldrh	r3, [r7, #8]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b2f      	ldr	r3, [pc, #188]	@ (800195c <TelemNode_Update+0x11c>)
 80018a0:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0;
 80018a2:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <TelemNode_Update+0x11c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	711a      	strb	r2, [r3, #4]
	tx_data[5] = 0;
 80018a8:	4b2c      	ldr	r3, [pc, #176]	@ (800195c <TelemNode_Update+0x11c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0;
 80018ae:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <TelemNode_Update+0x11c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	719a      	strb	r2, [r3, #6]
	tx_data[7] = 0;
 80018b4:	4b29      	ldr	r3, [pc, #164]	@ (800195c <TelemNode_Update+0x11c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	71da      	strb	r2, [r3, #7]

	if(CAN_Send(0x400, tx_data, 8) != HAL_OK)
 80018ba:	2208      	movs	r2, #8
 80018bc:	4927      	ldr	r1, [pc, #156]	@ (800195c <TelemNode_Update+0x11c>)
 80018be:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018c2:	f7ff fadb 	bl	8000e7c <CAN_Send>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <TelemNode_Update+0x90>
	{
		Error_Handler();
 80018cc:	f7ff fd96 	bl	80013fc <Error_Handler>
	}

	for(int i = 0; i < WHEEL_SPEED_LOOPS; i++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e035      	b.n	8001942 <TelemNode_Update+0x102>
	{
		// casting to uint16_t, should never overflow
		uint16_t cps_rr = (uint16_t)WheelSpeed_GetCPS(&wheel_rr);
 80018d6:	4822      	ldr	r0, [pc, #136]	@ (8001960 <TelemNode_Update+0x120>)
 80018d8:	f000 f977 	bl	8001bca <WheelSpeed_GetCPS>
 80018dc:	4603      	mov	r3, r0
 80018de:	80fb      	strh	r3, [r7, #6]
		uint16_t cps_rl = (uint16_t)WheelSpeed_GetCPS(&wheel_rl);
 80018e0:	4820      	ldr	r0, [pc, #128]	@ (8001964 <TelemNode_Update+0x124>)
 80018e2:	f000 f972 	bl	8001bca <WheelSpeed_GetCPS>
 80018e6:	4603      	mov	r3, r0
 80018e8:	80bb      	strh	r3, [r7, #4]

		tx_data[0] = HI8(cps_rr);
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <TelemNode_Update+0x11c>)
 80018f4:	701a      	strb	r2, [r3, #0]
		tx_data[1] = LO8(cps_rr);
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <TelemNode_Update+0x11c>)
 80018fc:	705a      	strb	r2, [r3, #1]
		tx_data[2] = HI8(cps_rl);
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <TelemNode_Update+0x11c>)
 8001908:	709a      	strb	r2, [r3, #2]
		tx_data[3] = LO8(cps_rl);
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <TelemNode_Update+0x11c>)
 8001910:	70da      	strb	r2, [r3, #3]

		if(CAN_Send(0x401, tx_data, 4) != HAL_OK)
 8001912:	2204      	movs	r2, #4
 8001914:	4911      	ldr	r1, [pc, #68]	@ (800195c <TelemNode_Update+0x11c>)
 8001916:	f240 4001 	movw	r0, #1025	@ 0x401
 800191a:	f7ff faaf 	bl	8000e7c <CAN_Send>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <TelemNode_Update+0xe8>
		{
			Error_Handler();
 8001924:	f7ff fd6a 	bl	80013fc <Error_Handler>
		}

		buzzerer();
 8001928:	f000 f8e0 	bl	8001aec <buzzerer>
		update_pwm(inlet_temp);
 800192c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001930:	4618      	mov	r0, r3
 8001932:	f000 f819 	bl	8001968 <update_pwm>
		HAL_Delay(LOOP_PERIOD_MS);
 8001936:	2064      	movs	r0, #100	@ 0x64
 8001938:	f000 f9fa 	bl	8001d30 <HAL_Delay>
	for(int i = 0; i < WHEEL_SPEED_LOOPS; i++)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b04      	cmp	r3, #4
 8001946:	ddc6      	ble.n	80018d6 <TelemNode_Update+0x96>
	}
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200000f4 	.word	0x200000f4
 8001958:	20000108 	.word	0x20000108
 800195c:	20000144 	.word	0x20000144
 8001960:	2000012c 	.word	0x2000012c
 8001964:	20000138 	.word	0x20000138

08001968 <update_pwm>:

void update_pwm(int16_t inlet_temp)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
	//TODO: update these values to consider ambient air temp, vehicle speed, etc?
	if(can_data.inverter_enable || (can_data.mc_temp_max > 400) || (can_data.motor_temp > 400)){
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <update_pwm+0x7c>)
 8001974:	7b1b      	ldrb	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10b      	bne.n	8001992 <update_pwm+0x2a>
 800197a:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <update_pwm+0x7c>)
 800197c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001980:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001984:	dc05      	bgt.n	8001992 <update_pwm+0x2a>
 8001986:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <update_pwm+0x7c>)
 8001988:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800198c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001990:	dd03      	ble.n	800199a <update_pwm+0x32>
		set_pump_speed(255);
 8001992:	20ff      	movs	r0, #255	@ 0xff
 8001994:	f000 f886 	bl	8001aa4 <set_pump_speed>
 8001998:	e002      	b.n	80019a0 <update_pwm+0x38>
	} else {
		set_pump_speed(0);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f882 	bl	8001aa4 <set_pump_speed>
	}

	if(inlet_temp > 600){
 80019a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80019a8:	dd03      	ble.n	80019b2 <update_pwm+0x4a>
		set_fan_speed(255);
 80019aa:	20ff      	movs	r0, #255	@ 0xff
 80019ac:	f000 f88c 	bl	8001ac8 <set_fan_speed>
		set_fan_speed(100);
	} else {
		set_fan_speed(0);
	}

}
 80019b0:	e014      	b.n	80019dc <update_pwm+0x74>
	} else if(inlet_temp > 500){
 80019b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80019ba:	dd03      	ble.n	80019c4 <update_pwm+0x5c>
		set_fan_speed(180);
 80019bc:	20b4      	movs	r0, #180	@ 0xb4
 80019be:	f000 f883 	bl	8001ac8 <set_fan_speed>
}
 80019c2:	e00b      	b.n	80019dc <update_pwm+0x74>
	} else if(inlet_temp > 400){
 80019c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80019cc:	dd03      	ble.n	80019d6 <update_pwm+0x6e>
		set_fan_speed(100);
 80019ce:	2064      	movs	r0, #100	@ 0x64
 80019d0:	f000 f87a 	bl	8001ac8 <set_fan_speed>
}
 80019d4:	e002      	b.n	80019dc <update_pwm+0x74>
		set_fan_speed(0);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f876 	bl	8001ac8 <set_fan_speed>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000028 	.word	0x20000028

080019e8 <get_temp>:
	float temp = (v - 0.5) * 25.0 / 4.0;
	return (int16_t)(temp * 10);
}

int16_t get_temp(uint16_t adc_val)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
	// TDH60W temp/pressure sensors have a FUCKING TRASH datasheet that doesn't list output curves
	// only reference to temperature is 125C max
	// assuming temperature range is 0C-125C mapped to 0.5V-4.5V

	float v = (float)adc_val * (3.3/4095.0) / VOLTAGE_DIVIDER_RATIO;
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f933 	bl	8000c60 <__aeabi_ui2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fdbf 	bl	8000580 <__aeabi_f2d>
 8001a02:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a80 <get_temp+0x98>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fe12 	bl	8000630 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	a31c      	add	r3, pc, #112	@ (adr r3, 8001a88 <get_temp+0xa0>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe ff33 	bl	8000884 <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f7ff f815 	bl	8000a54 <__aeabi_d2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	60fb      	str	r3, [r7, #12]
	//v = v - 0.040; // ground reference is 40m
	//float temp = ((v - 0.5) * (120 + 40) / 4.0) - 40;
	float temp = (46.7558 * v) - 65.9775; // values from calibration run
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7fe fda6 	bl	8000580 <__aeabi_f2d>
 8001a34:	a316      	add	r3, pc, #88	@ (adr r3, 8001a90 <get_temp+0xa8>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7fe fdf9 	bl	8000630 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	a314      	add	r3, pc, #80	@ (adr r3, 8001a98 <get_temp+0xb0>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fc38 	bl	80002c0 <__aeabi_dsub>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7fe fffc 	bl	8000a54 <__aeabi_d2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60bb      	str	r3, [r7, #8]
	return (int16_t)(temp * 10);
 8001a60:	490f      	ldr	r1, [pc, #60]	@ (8001aa0 <get_temp+0xb8>)
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	f7fe fb74 	bl	8000150 <__aeabi_fmul>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f950 	bl	8000d10 <__aeabi_f2iz>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b21b      	sxth	r3, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	f3af 8000 	nop.w
 8001a80:	e734d9b4 	.word	0xe734d9b4
 8001a84:	3f4a680c 	.word	0x3f4a680c
 8001a88:	5493954a 	.word	0x5493954a
 8001a8c:	3fe54939 	.word	0x3fe54939
 8001a90:	0ded288d 	.word	0x0ded288d
 8001a94:	404760be 	.word	0x404760be
 8001a98:	5c28f5c3 	.word	0x5c28f5c3
 8001a9c:	40507e8f 	.word	0x40507e8f
 8001aa0:	41200000 	.word	0x41200000

08001aa4 <set_pump_speed>:

void set_pump_speed(uint8_t speed)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
	PWM_SetDutyCycle(&pwm_pump, 255-speed);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <set_pump_speed+0x20>)
 8001ab8:	f7ff fcbc 	bl	8001434 <PWM_SetDutyCycle>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000124 	.word	0x20000124

08001ac8 <set_fan_speed>:

void set_fan_speed(uint8_t speed)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
	PWM_SetDutyCycle(&pwm_fan, 255-speed);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <set_fan_speed+0x20>)
 8001adc:	f7ff fcaa 	bl	8001434 <PWM_SetDutyCycle>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000011c 	.word	0x2000011c

08001aec <buzzerer>:

void buzzerer()
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
	static VCU_STATE_t last_vcu_state = LV;
	static uint32_t buzz_start = 0;
	uint32_t tick = HAL_GetTick();
 8001af2:	f000 f913 	bl	8001d1c <HAL_GetTick>
 8001af6:	6078      	str	r0, [r7, #4]

	if(last_vcu_state == HV_ENABLED && can_data.vcu_state == DRIVE)
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <buzzerer+0x64>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d10d      	bne.n	8001b1c <buzzerer+0x30>
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <buzzerer+0x68>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d109      	bne.n	8001b1c <buzzerer+0x30>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1); // turn on buzzer
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b0e:	4812      	ldr	r0, [pc, #72]	@ (8001b58 <buzzerer+0x6c>)
 8001b10:	f001 fe64 	bl	80037dc <HAL_GPIO_WritePin>
		buzz_start = tick;
 8001b14:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <buzzerer+0x70>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e011      	b.n	8001b40 <buzzerer+0x54>
	}
	else if(can_data.vcu_state != DRIVE || (tick - buzz_start) > BUZZ_TIME_MS)
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <buzzerer+0x68>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d107      	bne.n	8001b34 <buzzerer+0x48>
 8001b24:	4b0d      	ldr	r3, [pc, #52]	@ (8001b5c <buzzerer+0x70>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d905      	bls.n	8001b40 <buzzerer+0x54>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0); // turn off buzzer
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b3a:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <buzzerer+0x6c>)
 8001b3c:	f001 fe4e 	bl	80037dc <HAL_GPIO_WritePin>
	else
	{
		// ice cream?
	}

	last_vcu_state = can_data.vcu_state;
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <buzzerer+0x68>)
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	4b02      	ldr	r3, [pc, #8]	@ (8001b50 <buzzerer+0x64>)
 8001b46:	701a      	strb	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000014c 	.word	0x2000014c
 8001b54:	20000028 	.word	0x20000028
 8001b58:	40010c00 	.word	0x40010c00
 8001b5c:	20000150 	.word	0x20000150

08001b60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b70:	d008      	beq.n	8001b84 <HAL_GPIO_EXTI_Callback+0x24>
 8001b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b76:	d10b      	bne.n	8001b90 <HAL_GPIO_EXTI_Callback+0x30>
		case GPIO_PIN_15:
			wheel_rr.count++;
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b80:	6093      	str	r3, [r2, #8]
			break;
 8001b82:	e005      	b.n	8001b90 <HAL_GPIO_EXTI_Callback+0x30>
		case GPIO_PIN_8:
			wheel_rl.count++;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b8c:	6093      	str	r3, [r2, #8]
			break;
 8001b8e:	bf00      	nop
	}
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000012c 	.word	0x2000012c
 8001ba0:	20000138 	.word	0x20000138

08001ba4 <WheelSpeed_Init>:


#include "wheel_speed.h"

void WheelSpeed_Init(WheelSpeed_t* ws)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	ws->last_count = 0;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
	ws->count = 0;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
	ws->last_tick = HAL_GetTick();
 8001bb8:	f000 f8b0 	bl	8001d1c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	601a      	str	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <WheelSpeed_GetCPS>:

uint32_t WheelSpeed_GetCPS(WheelSpeed_t* ws)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	uint32_t tick = HAL_GetTick();
 8001bd2:	f000 f8a3 	bl	8001d1c <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]
	uint32_t dif = (tick - ws->last_tick);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]

	// prevent divide by 0
	if(dif == 0) dif = 1;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <WheelSpeed_GetCPS+0x22>
 8001be8:	2301      	movs	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]

	uint32_t cps = 1000 * (ws->count - ws->last_count) / dif;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bfa:	fb03 f202 	mul.w	r2, r3, r2
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	60fb      	str	r3, [r7, #12]

	ws->last_count = ws->count;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	605a      	str	r2, [r3, #4]
	ws->last_tick = tick;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	601a      	str	r2, [r3, #0]

	return cps;
 8001c14:	68fb      	ldr	r3, [r7, #12]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c20:	f7ff fdca 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c24:	480b      	ldr	r0, [pc, #44]	@ (8001c54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c26:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c28:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a09      	ldr	r2, [pc, #36]	@ (8001c60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c3c:	4c09      	ldr	r4, [pc, #36]	@ (8001c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f003 f98d 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c4e:	f7ff f9d9 	bl	8001004 <main>
  bx lr
 8001c52:	4770      	bx	lr
  ldr r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c5c:	08005010 	.word	0x08005010
  ldr r2, =_sbss
 8001c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c64:	20000158 	.word	0x20000158

08001c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC1_2_IRQHandler>
	...

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_Init+0x28>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_Init+0x28>)
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f001 fbe7 	bl	8003450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f000 f808 	bl	8001c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fc28 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40022000 	.word	0x40022000

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_InitTick+0x54>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_InitTick+0x58>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fbff 	bl	80034ba <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00e      	b.n	8001ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d80a      	bhi.n	8001ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f001 fbc7 	bl	8003466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd8:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_InitTick+0x5c>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000004 	.word	0x20000004

08001cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_IncTick+0x1c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_IncTick+0x20>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a03      	ldr	r2, [pc, #12]	@ (8001d18 <HAL_IncTick+0x20>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000154 	.word	0x20000154

08001d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b02      	ldr	r3, [pc, #8]	@ (8001d2c <HAL_GetTick+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000154 	.word	0x20000154

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_GetTick>
 8001d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d005      	beq.n	8001d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_Delay+0x44>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d56:	bf00      	nop
 8001d58:	f7ff ffe0 	bl	8001d1c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d8f7      	bhi.n	8001d58 <HAL_Delay+0x28>
  {
  }
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000008 	.word	0x20000008

08001d78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0be      	b.n	8001f18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fbc2 	bl	8001540 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 fbc5 	bl	800254c <ADC_ConversionStop_Disable>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 8099 	bne.w	8001f06 <HAL_ADC_Init+0x18e>
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8095 	bne.w	8001f06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001de4:	f023 0302 	bic.w	r3, r3, #2
 8001de8:	f043 0202 	orr.w	r2, r3, #2
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7b1b      	ldrb	r3, [r3, #12]
 8001dfe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e10:	d003      	beq.n	8001e1a <HAL_ADC_Init+0xa2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_ADC_Init+0xa8>
 8001e1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_Init+0xaa>
 8001e20:	2300      	movs	r3, #0
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7d1b      	ldrb	r3, [r3, #20]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d119      	bne.n	8001e64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7b1b      	ldrb	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d109      	bne.n	8001e4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	035a      	lsls	r2, r3, #13
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e00b      	b.n	8001e64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	f043 0220 	orr.w	r2, r3, #32
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	f043 0201 	orr.w	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	4b28      	ldr	r3, [pc, #160]	@ (8001f20 <HAL_ADC_Init+0x1a8>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e94:	d003      	beq.n	8001e9e <HAL_ADC_Init+0x126>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d104      	bne.n	8001ea8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	051b      	lsls	r3, r3, #20
 8001ea6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_ADC_Init+0x1ac>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10b      	bne.n	8001ee4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed6:	f023 0303 	bic.w	r3, r3, #3
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee2:	e018      	b.n	8001f16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	f023 0312 	bic.w	r3, r3, #18
 8001eec:	f043 0210 	orr.w	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f04:	e007      	b.n	8001f16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	f043 0210 	orr.w	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	ffe1f7fd 	.word	0xffe1f7fd
 8001f24:	ff1f0efe 	.word	0xff1f0efe

08001f28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Start+0x1a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e098      	b.n	8002074 <HAL_ADC_Start+0x14c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 faa4 	bl	8002498 <ADC_Enable>
 8001f50:	4603      	mov	r3, r0
 8001f52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 8087 	bne.w	800206a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a41      	ldr	r2, [pc, #260]	@ (800207c <HAL_ADC_Start+0x154>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d105      	bne.n	8001f86 <HAL_ADC_Start+0x5e>
 8001f7a:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <HAL_ADC_Start+0x158>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d115      	bne.n	8001fb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d026      	beq.n	8001fee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fa8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fb0:	e01d      	b.n	8001fee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002080 <HAL_ADC_Start+0x158>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d004      	beq.n	8001fd2 <HAL_ADC_Start+0xaa>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800207c <HAL_ADC_Start+0x154>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d10d      	bne.n	8001fee <HAL_ADC_Start+0xc6>
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <HAL_ADC_Start+0x158>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001fe6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	f023 0206 	bic.w	r2, r3, #6
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002006:	e002      	b.n	800200e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f06f 0202 	mvn.w	r2, #2
 800201e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800202a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800202e:	d113      	bne.n	8002058 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002034:	4a11      	ldr	r2, [pc, #68]	@ (800207c <HAL_ADC_Start+0x154>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d105      	bne.n	8002046 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800203a:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <HAL_ADC_Start+0x158>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	e00c      	b.n	8002072 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	e003      	b.n	8002072 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40012800 	.word	0x40012800
 8002080:	40012400 	.word	0x40012400

08002084 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800209a:	f7ff fe3f 	bl	8001d1c <HAL_GetTick>
 800209e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f043 0220 	orr.w	r2, r3, #32
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0d3      	b.n	800226e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d131      	bne.n	8002138 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d12a      	bne.n	8002138 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020e2:	e021      	b.n	8002128 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ea:	d01d      	beq.n	8002128 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_ADC_PollForConversion+0x7e>
 80020f2:	f7ff fe13 	bl	8001d1c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d212      	bcs.n	8002128 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	f043 0204 	orr.w	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0a2      	b.n	800226e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0d6      	beq.n	80020e4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002136:	e070      	b.n	800221a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002138:	4b4f      	ldr	r3, [pc, #316]	@ (8002278 <HAL_ADC_PollForConversion+0x1f4>)
 800213a:	681c      	ldr	r4, [r3, #0]
 800213c:	2002      	movs	r0, #2
 800213e:	f002 f831 	bl	80041a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002142:	4603      	mov	r3, r0
 8002144:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	4b4b      	ldr	r3, [pc, #300]	@ (800227c <HAL_ADC_PollForConversion+0x1f8>)
 8002150:	400b      	ands	r3, r1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d118      	bne.n	8002188 <HAL_ADC_PollForConversion+0x104>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68d9      	ldr	r1, [r3, #12]
 800215c:	4b48      	ldr	r3, [pc, #288]	@ (8002280 <HAL_ADC_PollForConversion+0x1fc>)
 800215e:	400b      	ands	r3, r1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d111      	bne.n	8002188 <HAL_ADC_PollForConversion+0x104>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6919      	ldr	r1, [r3, #16]
 800216a:	4b46      	ldr	r3, [pc, #280]	@ (8002284 <HAL_ADC_PollForConversion+0x200>)
 800216c:	400b      	ands	r3, r1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <HAL_ADC_PollForConversion+0x100>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68d9      	ldr	r1, [r3, #12]
 8002178:	4b43      	ldr	r3, [pc, #268]	@ (8002288 <HAL_ADC_PollForConversion+0x204>)
 800217a:	400b      	ands	r3, r1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_PollForConversion+0x100>
 8002180:	2314      	movs	r3, #20
 8002182:	e020      	b.n	80021c6 <HAL_ADC_PollForConversion+0x142>
 8002184:	2329      	movs	r3, #41	@ 0x29
 8002186:	e01e      	b.n	80021c6 <HAL_ADC_PollForConversion+0x142>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_ADC_PollForConversion+0x200>)
 8002190:	400b      	ands	r3, r1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_ADC_PollForConversion+0x120>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68d9      	ldr	r1, [r3, #12]
 800219c:	4b3a      	ldr	r3, [pc, #232]	@ (8002288 <HAL_ADC_PollForConversion+0x204>)
 800219e:	400b      	ands	r3, r1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <HAL_ADC_PollForConversion+0x13c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6919      	ldr	r1, [r3, #16]
 80021aa:	4b38      	ldr	r3, [pc, #224]	@ (800228c <HAL_ADC_PollForConversion+0x208>)
 80021ac:	400b      	ands	r3, r1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d108      	bne.n	80021c4 <HAL_ADC_PollForConversion+0x140>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68d9      	ldr	r1, [r3, #12]
 80021b8:	4b34      	ldr	r3, [pc, #208]	@ (800228c <HAL_ADC_PollForConversion+0x208>)
 80021ba:	400b      	ands	r3, r1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_PollForConversion+0x140>
 80021c0:	2354      	movs	r3, #84	@ 0x54
 80021c2:	e000      	b.n	80021c6 <HAL_ADC_PollForConversion+0x142>
 80021c4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021cc:	e021      	b.n	8002212 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d01a      	beq.n	800220c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d007      	beq.n	80021ec <HAL_ADC_PollForConversion+0x168>
 80021dc:	f7ff fd9e 	bl	8001d1c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d20f      	bcs.n	800220c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d90b      	bls.n	800220c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	f043 0204 	orr.w	r2, r3, #4
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e030      	b.n	800226e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	429a      	cmp	r2, r3
 8002218:	d8d9      	bhi.n	80021ce <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f06f 0212 	mvn.w	r2, #18
 8002222:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800223a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800223e:	d115      	bne.n	800226c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}
 8002276:	bf00      	nop
 8002278:	20000000 	.word	0x20000000
 800227c:	24924924 	.word	0x24924924
 8002280:	00924924 	.word	0x00924924
 8002284:	12492492 	.word	0x12492492
 8002288:	00492492 	.word	0x00492492
 800228c:	00249249 	.word	0x00249249

08002290 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x20>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e0dc      	b.n	8002482 <HAL_ADC_ConfigChannel+0x1da>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d81c      	bhi.n	8002312 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	3b05      	subs	r3, #5
 80022ea:	221f      	movs	r2, #31
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4019      	ands	r1, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b05      	subs	r3, #5
 8002304:	fa00 f203 	lsl.w	r2, r0, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002310:	e03c      	b.n	800238c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d81c      	bhi.n	8002354 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b23      	subs	r3, #35	@ 0x23
 800232c:	221f      	movs	r2, #31
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	4019      	ands	r1, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b23      	subs	r3, #35	@ 0x23
 8002346:	fa00 f203 	lsl.w	r2, r0, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
 8002352:	e01b      	b.n	800238c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b41      	subs	r3, #65	@ 0x41
 8002366:	221f      	movs	r2, #31
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	4019      	ands	r1, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b41      	subs	r3, #65	@ 0x41
 8002380:	fa00 f203 	lsl.w	r2, r0, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b09      	cmp	r3, #9
 8002392:	d91c      	bls.n	80023ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68d9      	ldr	r1, [r3, #12]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	3b1e      	subs	r3, #30
 80023a6:	2207      	movs	r2, #7
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4019      	ands	r1, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6898      	ldr	r0, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	3b1e      	subs	r3, #30
 80023c0:	fa00 f203 	lsl.w	r2, r0, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	e019      	b.n	8002402 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6919      	ldr	r1, [r3, #16]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	2207      	movs	r2, #7
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4019      	ands	r1, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6898      	ldr	r0, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b10      	cmp	r3, #16
 8002408:	d003      	beq.n	8002412 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800240e:	2b11      	cmp	r3, #17
 8002410:	d132      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1d      	ldr	r2, [pc, #116]	@ (800248c <HAL_ADC_ConfigChannel+0x1e4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d125      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d126      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002438:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b10      	cmp	r3, #16
 8002440:	d11a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <HAL_ADC_ConfigChannel+0x1e8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <HAL_ADC_ConfigChannel+0x1ec>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	0c9a      	lsrs	r2, r3, #18
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002458:	e002      	b.n	8002460 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3b01      	subs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_ConfigChannel+0x1b2>
 8002466:	e007      	b.n	8002478 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40012400 	.word	0x40012400
 8002490:	20000000 	.word	0x20000000
 8002494:	431bde83 	.word	0x431bde83

08002498 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d040      	beq.n	8002538 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <ADC_Enable+0xac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <ADC_Enable+0xb0>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	0c9b      	lsrs	r3, r3, #18
 80024d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024d4:	e002      	b.n	80024dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024e2:	f7ff fc1b 	bl	8001d1c <HAL_GetTick>
 80024e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024e8:	e01f      	b.n	800252a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ea:	f7ff fc17 	bl	8001d1c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d918      	bls.n	800252a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d011      	beq.n	800252a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	f043 0210 	orr.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e007      	b.n	800253a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d1d8      	bne.n	80024ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000000 	.word	0x20000000
 8002548:	431bde83 	.word	0x431bde83

0800254c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d12e      	bne.n	80025c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002576:	f7ff fbd1 	bl	8001d1c <HAL_GetTick>
 800257a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800257c:	e01b      	b.n	80025b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800257e:	f7ff fbcd 	bl	8001d1c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d914      	bls.n	80025b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10d      	bne.n	80025b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259e:	f043 0210 	orr.w	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e007      	b.n	80025c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d0dc      	beq.n	800257e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0ed      	b.n	80027bc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7fe ffe3 	bl	80015b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002602:	f7ff fb8b 	bl	8001d1c <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002608:	e012      	b.n	8002630 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800260a:	f7ff fb87 	bl	8001d1c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b0a      	cmp	r3, #10
 8002616:	d90b      	bls.n	8002630 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2205      	movs	r2, #5
 8002628:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0c5      	b.n	80027bc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0e5      	beq.n	800260a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0202 	bic.w	r2, r2, #2
 800264c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800264e:	f7ff fb65 	bl	8001d1c <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002654:	e012      	b.n	800267c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002656:	f7ff fb61 	bl	8001d1c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b0a      	cmp	r3, #10
 8002662:	d90b      	bls.n	800267c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2205      	movs	r2, #5
 8002674:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e09f      	b.n	80027bc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1e5      	bne.n	8002656 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7e1b      	ldrb	r3, [r3, #24]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e007      	b.n	80026b4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7e5b      	ldrb	r3, [r3, #25]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d108      	bne.n	80026ce <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e007      	b.n	80026de <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7e9b      	ldrb	r3, [r3, #26]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d108      	bne.n	80026f8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e007      	b.n	8002708 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0220 	bic.w	r2, r2, #32
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7edb      	ldrb	r3, [r3, #27]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d108      	bne.n	8002722 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0210 	bic.w	r2, r2, #16
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e007      	b.n	8002732 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0210 	orr.w	r2, r2, #16
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7f1b      	ldrb	r3, [r3, #28]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d108      	bne.n	800274c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0208 	orr.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e007      	b.n	800275c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0208 	bic.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7f5b      	ldrb	r3, [r3, #29]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d108      	bne.n	8002776 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0204 	orr.w	r2, r2, #4
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	e007      	b.n	8002786 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0204 	bic.w	r2, r2, #4
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	ea42 0103 	orr.w	r1, r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	1e5a      	subs	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d003      	beq.n	80027ea <HAL_CAN_ConfigFilter+0x26>
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f040 80aa 	bne.w	800293e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2201      	movs	r2, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	401a      	ands	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d123      	bne.n	800286c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	43db      	mvns	r3, r3
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002846:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3248      	adds	r2, #72	@ 0x48
 800284c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002860:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002862:	6979      	ldr	r1, [r7, #20]
 8002864:	3348      	adds	r3, #72	@ 0x48
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d122      	bne.n	80028ba <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002894:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3248      	adds	r2, #72	@ 0x48
 800289a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028b0:	6979      	ldr	r1, [r7, #20]
 80028b2:	3348      	adds	r3, #72	@ 0x48
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	401a      	ands	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80028d4:	e007      	b.n	80028e6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	431a      	orrs	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	401a      	ands	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002900:	e007      	b.n	8002912 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	431a      	orrs	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	431a      	orrs	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002930:	f023 0201 	bic.w	r2, r3, #1
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e006      	b.n	800294c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002942:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d12e      	bne.n	80029c8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002982:	f7ff f9cb 	bl	8001d1c <HAL_GetTick>
 8002986:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002988:	e012      	b.n	80029b0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800298a:	f7ff f9c7 	bl	8001d1c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b0a      	cmp	r3, #10
 8002996:	d90b      	bls.n	80029b0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2205      	movs	r2, #5
 80029a8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e012      	b.n	80029d6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e5      	bne.n	800298a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e006      	b.n	80029d6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029de:	b480      	push	{r7}
 80029e0:	b089      	sub	sp, #36	@ 0x24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d003      	beq.n	8002a0a <HAL_CAN_AddTxMessage+0x2c>
 8002a02:	7ffb      	ldrb	r3, [r7, #31]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	f040 80ad 	bne.w	8002b64 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8095 	beq.w	8002b54 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	0e1b      	lsrs	r3, r3, #24
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a34:	2201      	movs	r2, #1
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	6809      	ldr	r1, [r1, #0]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3318      	adds	r3, #24
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	440b      	add	r3, r1
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e00f      	b.n	8002a82 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a6c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a76:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3318      	adds	r3, #24
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	440b      	add	r3, r1
 8002a80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3318      	adds	r3, #24
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	440b      	add	r3, r1
 8002a92:	3304      	adds	r3, #4
 8002a94:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	7d1b      	ldrb	r3, [r3, #20]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d111      	bne.n	8002ac2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3304      	adds	r3, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	6811      	ldr	r1, [r2, #0]
 8002ab2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3318      	adds	r3, #24
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	440b      	add	r3, r1
 8002abe:	3304      	adds	r3, #4
 8002ac0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3307      	adds	r3, #7
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	061a      	lsls	r2, r3, #24
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3306      	adds	r3, #6
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3305      	adds	r3, #5
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	4313      	orrs	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	3204      	adds	r2, #4
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	6811      	ldr	r1, [r2, #0]
 8002aea:	ea43 0200 	orr.w	r2, r3, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	440b      	add	r3, r1
 8002af4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002af8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3303      	adds	r3, #3
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	061a      	lsls	r2, r3, #24
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3302      	adds	r3, #2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	4313      	orrs	r3, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	6811      	ldr	r1, [r2, #0]
 8002b20:	ea43 0200 	orr.w	r2, r3, r0
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	440b      	add	r3, r1
 8002b2a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	3318      	adds	r3, #24
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4413      	add	r3, r2
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6811      	ldr	r1, [r2, #0]
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	3318      	adds	r3, #24
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	440b      	add	r3, r1
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e00e      	b.n	8002b72 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e006      	b.n	8002b72 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b90:	7afb      	ldrb	r3, [r7, #11]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d002      	beq.n	8002b9c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002b96:	7afb      	ldrb	r3, [r7, #11]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d11d      	bne.n	8002bd8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3301      	adds	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d003      	beq.n	8002c08 <HAL_CAN_GetRxMessage+0x24>
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	f040 8103 	bne.w	8002e0e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0f7      	b.n	8002e1c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d107      	bne.n	8002c4a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0e8      	b.n	8002e1c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	331b      	adds	r3, #27
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	4413      	add	r3, r2
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0204 	and.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10c      	bne.n	8002c82 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	331b      	adds	r3, #27
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0d5b      	lsrs	r3, r3, #21
 8002c78:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e00b      	b.n	8002c9a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	331b      	adds	r3, #27
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	331b      	adds	r3, #27
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	4413      	add	r3, r2
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0202 	and.w	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	331b      	adds	r3, #27
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2208      	movs	r2, #8
 8002ccc:	611a      	str	r2, [r3, #16]
 8002cce:	e00b      	b.n	8002ce8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	331b      	adds	r3, #27
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	4413      	add	r3, r2
 8002cdc:	3304      	adds	r3, #4
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 020f 	and.w	r2, r3, #15
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	331b      	adds	r3, #27
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	331b      	adds	r3, #27
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	0a1a      	lsrs	r2, r3, #8
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0c1a      	lsrs	r2, r3, #16
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e1a      	lsrs	r2, r3, #24
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	3303      	adds	r3, #3
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0a1a      	lsrs	r2, r3, #8
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3305      	adds	r3, #5
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0c1a      	lsrs	r2, r3, #16
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	3306      	adds	r3, #6
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e1a      	lsrs	r2, r3, #24
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	3307      	adds	r3, #7
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d108      	bne.n	8002dfa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0220 	orr.w	r2, r2, #32
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	e007      	b.n	8002e0a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0220 	orr.w	r2, r2, #32
 8002e08:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e006      	b.n	8002e1c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e36:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d002      	beq.n	8002e44 <HAL_CAN_ActivateNotification+0x1e>
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d109      	bne.n	8002e58 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6959      	ldr	r1, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e006      	b.n	8002e66 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	@ 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d07c      	beq.n	8002fb0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f983 	bl	80031de <HAL_CAN_TxMailbox0CompleteCallback>
 8002ed8:	e016      	b.n	8002f08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eec:	e00c      	b.n	8002f08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f00:	e002      	b.n	8002f08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f986 	bl	8003214 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d024      	beq.n	8002f5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f962 	bl	80031f0 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f2c:	e016      	b.n	8002f5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f40:	e00c      	b.n	8002f5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f54:	e002      	b.n	8002f5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f965 	bl	8003226 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d024      	beq.n	8002fb0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f941 	bl	8003202 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f80:	e016      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f94:	e00c      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa8:	e002      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f944 	bl	8003238 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d006      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f92a 	bl	800324a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd ff60 	bl	8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00c      	beq.n	8003038 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2210      	movs	r2, #16
 8003036:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f90a 	bl	800326e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8f2 	bl	800325c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d006      	beq.n	800309a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2210      	movs	r2, #16
 8003092:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f8f3 	bl	8003280 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00b      	beq.n	80030bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2208      	movs	r2, #8
 80030b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f8eb 	bl	8003292 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d07b      	beq.n	80031be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d072      	beq.n	80031b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	f043 0304 	orr.w	r3, r3, #4
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312a:	2b00      	cmp	r3, #0
 800312c:	d043      	beq.n	80031b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03e      	beq.n	80031b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800313e:	2b60      	cmp	r3, #96	@ 0x60
 8003140:	d02b      	beq.n	800319a <HAL_CAN_IRQHandler+0x32a>
 8003142:	2b60      	cmp	r3, #96	@ 0x60
 8003144:	d82e      	bhi.n	80031a4 <HAL_CAN_IRQHandler+0x334>
 8003146:	2b50      	cmp	r3, #80	@ 0x50
 8003148:	d022      	beq.n	8003190 <HAL_CAN_IRQHandler+0x320>
 800314a:	2b50      	cmp	r3, #80	@ 0x50
 800314c:	d82a      	bhi.n	80031a4 <HAL_CAN_IRQHandler+0x334>
 800314e:	2b40      	cmp	r3, #64	@ 0x40
 8003150:	d019      	beq.n	8003186 <HAL_CAN_IRQHandler+0x316>
 8003152:	2b40      	cmp	r3, #64	@ 0x40
 8003154:	d826      	bhi.n	80031a4 <HAL_CAN_IRQHandler+0x334>
 8003156:	2b30      	cmp	r3, #48	@ 0x30
 8003158:	d010      	beq.n	800317c <HAL_CAN_IRQHandler+0x30c>
 800315a:	2b30      	cmp	r3, #48	@ 0x30
 800315c:	d822      	bhi.n	80031a4 <HAL_CAN_IRQHandler+0x334>
 800315e:	2b10      	cmp	r3, #16
 8003160:	d002      	beq.n	8003168 <HAL_CAN_IRQHandler+0x2f8>
 8003162:	2b20      	cmp	r3, #32
 8003164:	d005      	beq.n	8003172 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003166:	e01d      	b.n	80031a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	f043 0308 	orr.w	r3, r3, #8
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003170:	e019      	b.n	80031a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	f043 0310 	orr.w	r3, r3, #16
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800317a:	e014      	b.n	80031a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	f043 0320 	orr.w	r3, r3, #32
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003184:	e00f      	b.n	80031a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800318e:	e00a      	b.n	80031a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003198:	e005      	b.n	80031a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80031a2:	e000      	b.n	80031a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80031a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80031b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2204      	movs	r2, #4
 80031bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f867 	bl	80032a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031d6:	bf00      	nop
 80031d8:	3728      	adds	r7, #40	@ 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
	...

080032b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	@ (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	@ (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4906      	ldr	r1, [pc, #24]	@ (8003350 <__NVIC_EnableIRQ+0x34>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db0a      	blt.n	800337e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	490c      	ldr	r1, [pc, #48]	@ (80033a0 <__NVIC_SetPriority+0x4c>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	440b      	add	r3, r1
 8003378:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800337c:	e00a      	b.n	8003394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4908      	ldr	r1, [pc, #32]	@ (80033a4 <__NVIC_SetPriority+0x50>)
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3b04      	subs	r3, #4
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	440b      	add	r3, r1
 8003392:	761a      	strb	r2, [r3, #24]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000e100 	.word	0xe000e100
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	@ 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf28      	it	cs
 80033c6:	2304      	movcs	r3, #4
 80033c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d902      	bls.n	80033d8 <NVIC_EncodePriority+0x30>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3b03      	subs	r3, #3
 80033d6:	e000      	b.n	80033da <NVIC_EncodePriority+0x32>
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	401a      	ands	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43d9      	mvns	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	4313      	orrs	r3, r2
         );
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	@ 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800341c:	d301      	bcc.n	8003422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341e:	2301      	movs	r3, #1
 8003420:	e00f      	b.n	8003442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <SysTick_Config+0x40>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3b01      	subs	r3, #1
 8003428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342a:	210f      	movs	r1, #15
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f7ff ff90 	bl	8003354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <SysTick_Config+0x40>)
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343a:	4b04      	ldr	r3, [pc, #16]	@ (800344c <SysTick_Config+0x40>)
 800343c:	2207      	movs	r2, #7
 800343e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff2d 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003478:	f7ff ff42 	bl	8003300 <__NVIC_GetPriorityGrouping>
 800347c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	6978      	ldr	r0, [r7, #20]
 8003484:	f7ff ff90 	bl	80033a8 <NVIC_EncodePriority>
 8003488:	4602      	mov	r2, r0
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff5f 	bl	8003354 <__NVIC_SetPriority>
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff35 	bl	800331c <__NVIC_EnableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ffa2 	bl	800340c <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b08b      	sub	sp, #44	@ 0x2c
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034e2:	2300      	movs	r3, #0
 80034e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e6:	e169      	b.n	80037bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034e8:	2201      	movs	r2, #1
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	429a      	cmp	r2, r3
 8003502:	f040 8158 	bne.w	80037b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4a9a      	ldr	r2, [pc, #616]	@ (8003774 <HAL_GPIO_Init+0x2a0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d05e      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 8003510:	4a98      	ldr	r2, [pc, #608]	@ (8003774 <HAL_GPIO_Init+0x2a0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d875      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 8003516:	4a98      	ldr	r2, [pc, #608]	@ (8003778 <HAL_GPIO_Init+0x2a4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d058      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 800351c:	4a96      	ldr	r2, [pc, #600]	@ (8003778 <HAL_GPIO_Init+0x2a4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d86f      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 8003522:	4a96      	ldr	r2, [pc, #600]	@ (800377c <HAL_GPIO_Init+0x2a8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d052      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 8003528:	4a94      	ldr	r2, [pc, #592]	@ (800377c <HAL_GPIO_Init+0x2a8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d869      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 800352e:	4a94      	ldr	r2, [pc, #592]	@ (8003780 <HAL_GPIO_Init+0x2ac>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04c      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 8003534:	4a92      	ldr	r2, [pc, #584]	@ (8003780 <HAL_GPIO_Init+0x2ac>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d863      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 800353a:	4a92      	ldr	r2, [pc, #584]	@ (8003784 <HAL_GPIO_Init+0x2b0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d046      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
 8003540:	4a90      	ldr	r2, [pc, #576]	@ (8003784 <HAL_GPIO_Init+0x2b0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d85d      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 8003546:	2b12      	cmp	r3, #18
 8003548:	d82a      	bhi.n	80035a0 <HAL_GPIO_Init+0xcc>
 800354a:	2b12      	cmp	r3, #18
 800354c:	d859      	bhi.n	8003602 <HAL_GPIO_Init+0x12e>
 800354e:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <HAL_GPIO_Init+0x80>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	080035cf 	.word	0x080035cf
 8003558:	080035a9 	.word	0x080035a9
 800355c:	080035bb 	.word	0x080035bb
 8003560:	080035fd 	.word	0x080035fd
 8003564:	08003603 	.word	0x08003603
 8003568:	08003603 	.word	0x08003603
 800356c:	08003603 	.word	0x08003603
 8003570:	08003603 	.word	0x08003603
 8003574:	08003603 	.word	0x08003603
 8003578:	08003603 	.word	0x08003603
 800357c:	08003603 	.word	0x08003603
 8003580:	08003603 	.word	0x08003603
 8003584:	08003603 	.word	0x08003603
 8003588:	08003603 	.word	0x08003603
 800358c:	08003603 	.word	0x08003603
 8003590:	08003603 	.word	0x08003603
 8003594:	08003603 	.word	0x08003603
 8003598:	080035b1 	.word	0x080035b1
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	4a79      	ldr	r2, [pc, #484]	@ (8003788 <HAL_GPIO_Init+0x2b4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035a6:	e02c      	b.n	8003602 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	623b      	str	r3, [r7, #32]
          break;
 80035ae:	e029      	b.n	8003604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	3304      	adds	r3, #4
 80035b6:	623b      	str	r3, [r7, #32]
          break;
 80035b8:	e024      	b.n	8003604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	3308      	adds	r3, #8
 80035c0:	623b      	str	r3, [r7, #32]
          break;
 80035c2:	e01f      	b.n	8003604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	330c      	adds	r3, #12
 80035ca:	623b      	str	r3, [r7, #32]
          break;
 80035cc:	e01a      	b.n	8003604 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035d6:	2304      	movs	r3, #4
 80035d8:	623b      	str	r3, [r7, #32]
          break;
 80035da:	e013      	b.n	8003604 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035e4:	2308      	movs	r3, #8
 80035e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	611a      	str	r2, [r3, #16]
          break;
 80035ee:	e009      	b.n	8003604 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035f0:	2308      	movs	r3, #8
 80035f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	615a      	str	r2, [r3, #20]
          break;
 80035fa:	e003      	b.n	8003604 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035fc:	2300      	movs	r3, #0
 80035fe:	623b      	str	r3, [r7, #32]
          break;
 8003600:	e000      	b.n	8003604 <HAL_GPIO_Init+0x130>
          break;
 8003602:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2bff      	cmp	r3, #255	@ 0xff
 8003608:	d801      	bhi.n	800360e <HAL_GPIO_Init+0x13a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	e001      	b.n	8003612 <HAL_GPIO_Init+0x13e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2bff      	cmp	r3, #255	@ 0xff
 8003618:	d802      	bhi.n	8003620 <HAL_GPIO_Init+0x14c>
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	e002      	b.n	8003626 <HAL_GPIO_Init+0x152>
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	3b08      	subs	r3, #8
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	210f      	movs	r1, #15
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	6a39      	ldr	r1, [r7, #32]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	431a      	orrs	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80b1 	beq.w	80037b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003654:	4b4d      	ldr	r3, [pc, #308]	@ (800378c <HAL_GPIO_Init+0x2b8>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4a4c      	ldr	r2, [pc, #304]	@ (800378c <HAL_GPIO_Init+0x2b8>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6193      	str	r3, [r2, #24]
 8003660:	4b4a      	ldr	r3, [pc, #296]	@ (800378c <HAL_GPIO_Init+0x2b8>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800366c:	4a48      	ldr	r2, [pc, #288]	@ (8003790 <HAL_GPIO_Init+0x2bc>)
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	3302      	adds	r3, #2
 8003674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003678:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	220f      	movs	r2, #15
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a40      	ldr	r2, [pc, #256]	@ (8003794 <HAL_GPIO_Init+0x2c0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_GPIO_Init+0x1ec>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3f      	ldr	r2, [pc, #252]	@ (8003798 <HAL_GPIO_Init+0x2c4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00d      	beq.n	80036bc <HAL_GPIO_Init+0x1e8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3e      	ldr	r2, [pc, #248]	@ (800379c <HAL_GPIO_Init+0x2c8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d007      	beq.n	80036b8 <HAL_GPIO_Init+0x1e4>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a3d      	ldr	r2, [pc, #244]	@ (80037a0 <HAL_GPIO_Init+0x2cc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_GPIO_Init+0x1e0>
 80036b0:	2303      	movs	r3, #3
 80036b2:	e006      	b.n	80036c2 <HAL_GPIO_Init+0x1ee>
 80036b4:	2304      	movs	r3, #4
 80036b6:	e004      	b.n	80036c2 <HAL_GPIO_Init+0x1ee>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e002      	b.n	80036c2 <HAL_GPIO_Init+0x1ee>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_GPIO_Init+0x1ee>
 80036c0:	2300      	movs	r3, #0
 80036c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c4:	f002 0203 	and.w	r2, r2, #3
 80036c8:	0092      	lsls	r2, r2, #2
 80036ca:	4093      	lsls	r3, r2
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036d2:	492f      	ldr	r1, [pc, #188]	@ (8003790 <HAL_GPIO_Init+0x2bc>)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	3302      	adds	r3, #2
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036ec:	4b2d      	ldr	r3, [pc, #180]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	492c      	ldr	r1, [pc, #176]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036fa:	4b2a      	ldr	r3, [pc, #168]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	43db      	mvns	r3, r3
 8003702:	4928      	ldr	r1, [pc, #160]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003704:	4013      	ands	r3, r2
 8003706:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003714:	4b23      	ldr	r3, [pc, #140]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	4922      	ldr	r1, [pc, #136]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	60cb      	str	r3, [r1, #12]
 8003720:	e006      	b.n	8003730 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003722:	4b20      	ldr	r3, [pc, #128]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	43db      	mvns	r3, r3
 800372a:	491e      	ldr	r1, [pc, #120]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 800372c:	4013      	ands	r3, r2
 800372e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800373c:	4b19      	ldr	r3, [pc, #100]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4918      	ldr	r1, [pc, #96]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
 8003748:	e006      	b.n	8003758 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800374a:	4b16      	ldr	r3, [pc, #88]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	43db      	mvns	r3, r3
 8003752:	4914      	ldr	r1, [pc, #80]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003754:	4013      	ands	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d021      	beq.n	80037a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003764:	4b0f      	ldr	r3, [pc, #60]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	490e      	ldr	r1, [pc, #56]	@ (80037a4 <HAL_GPIO_Init+0x2d0>)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
 8003770:	e021      	b.n	80037b6 <HAL_GPIO_Init+0x2e2>
 8003772:	bf00      	nop
 8003774:	10320000 	.word	0x10320000
 8003778:	10310000 	.word	0x10310000
 800377c:	10220000 	.word	0x10220000
 8003780:	10210000 	.word	0x10210000
 8003784:	10120000 	.word	0x10120000
 8003788:	10110000 	.word	0x10110000
 800378c:	40021000 	.word	0x40021000
 8003790:	40010000 	.word	0x40010000
 8003794:	40010800 	.word	0x40010800
 8003798:	40010c00 	.word	0x40010c00
 800379c:	40011000 	.word	0x40011000
 80037a0:	40011400 	.word	0x40011400
 80037a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037a8:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <HAL_GPIO_Init+0x304>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	4909      	ldr	r1, [pc, #36]	@ (80037d8 <HAL_GPIO_Init+0x304>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	3301      	adds	r3, #1
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f47f ae8e 	bne.w	80034e8 <HAL_GPIO_Init+0x14>
  }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	372c      	adds	r7, #44	@ 0x2c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	40010400 	.word	0x40010400

080037dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	807b      	strh	r3, [r7, #2]
 80037e8:	4613      	mov	r3, r2
 80037ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ec:	787b      	ldrb	r3, [r7, #1]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037f8:	e003      	b.n	8003802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	041a      	lsls	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	611a      	str	r2, [r3, #16]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003816:	4b08      	ldr	r3, [pc, #32]	@ (8003838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003822:	4a05      	ldr	r2, [pc, #20]	@ (8003838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe f998 	bl	8001b60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e272      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8087 	beq.w	800396a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800385c:	4b92      	ldr	r3, [pc, #584]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b04      	cmp	r3, #4
 8003866:	d00c      	beq.n	8003882 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003868:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d112      	bne.n	800389a <HAL_RCC_OscConfig+0x5e>
 8003874:	4b8c      	ldr	r3, [pc, #560]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d10b      	bne.n	800389a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003882:	4b89      	ldr	r3, [pc, #548]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d06c      	beq.n	8003968 <HAL_RCC_OscConfig+0x12c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d168      	bne.n	8003968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e24c      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x76>
 80038a4:	4b80      	ldr	r3, [pc, #512]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a7f      	ldr	r2, [pc, #508]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e02e      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x98>
 80038ba:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7a      	ldr	r2, [pc, #488]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b78      	ldr	r3, [pc, #480]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a77      	ldr	r2, [pc, #476]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e01d      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0xbc>
 80038de:	4b72      	ldr	r3, [pc, #456]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a71      	ldr	r2, [pc, #452]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e00b      	b.n	8003910 <HAL_RCC_OscConfig+0xd4>
 80038f8:	4b6b      	ldr	r3, [pc, #428]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b68      	ldr	r3, [pc, #416]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a67      	ldr	r2, [pc, #412]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800390a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800390e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fa00 	bl	8001d1c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe f9fc 	bl	8001d1c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e200      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0xe4>
 800393e:	e014      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe f9ec 	bl	8001d1c <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003948:	f7fe f9e8 	bl	8001d1c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	@ 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e1ec      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	4b53      	ldr	r3, [pc, #332]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x10c>
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d063      	beq.n	8003a3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003976:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003982:	4b49      	ldr	r3, [pc, #292]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b08      	cmp	r3, #8
 800398c:	d11c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x18c>
 800398e:	4b46      	ldr	r3, [pc, #280]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d116      	bne.n	80039c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	4b43      	ldr	r3, [pc, #268]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_OscConfig+0x176>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e1c0      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b2:	4b3d      	ldr	r3, [pc, #244]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4939      	ldr	r1, [pc, #228]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	e03a      	b.n	8003a3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d0:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fe f9a1 	bl	8001d1c <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039de:	f7fe f99d 	bl	8001d1c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1a1      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fc:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4927      	ldr	r1, [pc, #156]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	e015      	b.n	8003a3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a12:	4b26      	ldr	r3, [pc, #152]	@ (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe f980 	bl	8001d1c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a20:	f7fe f97c 	bl	8001d1c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e180      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d03a      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a52:	4b17      	ldr	r3, [pc, #92]	@ (8003ab0 <HAL_RCC_OscConfig+0x274>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7fe f960 	bl	8001d1c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7fe f95c 	bl	8001d1c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e160      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f000 fabc 	bl	8003ffc <RCC_Delay>
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a86:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab0 <HAL_RCC_OscConfig+0x274>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8c:	f7fe f946 	bl	8001d1c <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a92:	e00f      	b.n	8003ab4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a94:	f7fe f942 	bl	8001d1c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d908      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e146      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	42420000 	.word	0x42420000
 8003ab0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b92      	ldr	r3, [pc, #584]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e9      	bne.n	8003a94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a6 	beq.w	8003c1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10d      	bne.n	8003afa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	4b88      	ldr	r3, [pc, #544]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4a87      	ldr	r2, [pc, #540]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	61d3      	str	r3, [r2, #28]
 8003aea:	4b85      	ldr	r3, [pc, #532]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afa:	4b82      	ldr	r3, [pc, #520]	@ (8003d04 <HAL_RCC_OscConfig+0x4c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d118      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b06:	4b7f      	ldr	r3, [pc, #508]	@ (8003d04 <HAL_RCC_OscConfig+0x4c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d04 <HAL_RCC_OscConfig+0x4c8>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b12:	f7fe f903 	bl	8001d1c <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1a:	f7fe f8ff 	bl	8001d1c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	@ 0x64
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e103      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <HAL_RCC_OscConfig+0x4c8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x312>
 8003b40:	4b6f      	ldr	r3, [pc, #444]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	4a6e      	ldr	r2, [pc, #440]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6213      	str	r3, [r2, #32]
 8003b4c:	e02d      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x334>
 8003b56:	4b6a      	ldr	r3, [pc, #424]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4a69      	ldr	r2, [pc, #420]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6213      	str	r3, [r2, #32]
 8003b62:	4b67      	ldr	r3, [pc, #412]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	4a66      	ldr	r2, [pc, #408]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	6213      	str	r3, [r2, #32]
 8003b6e:	e01c      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d10c      	bne.n	8003b92 <HAL_RCC_OscConfig+0x356>
 8003b78:	4b61      	ldr	r3, [pc, #388]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4a60      	ldr	r2, [pc, #384]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	f043 0304 	orr.w	r3, r3, #4
 8003b82:	6213      	str	r3, [r2, #32]
 8003b84:	4b5e      	ldr	r3, [pc, #376]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4a5d      	ldr	r2, [pc, #372]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6213      	str	r3, [r2, #32]
 8003b90:	e00b      	b.n	8003baa <HAL_RCC_OscConfig+0x36e>
 8003b92:	4b5b      	ldr	r3, [pc, #364]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4a5a      	ldr	r2, [pc, #360]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6213      	str	r3, [r2, #32]
 8003b9e:	4b58      	ldr	r3, [pc, #352]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	4a57      	ldr	r2, [pc, #348]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	f023 0304 	bic.w	r3, r3, #4
 8003ba8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d015      	beq.n	8003bde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe f8b3 	bl	8001d1c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe f8af 	bl	8001d1c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e0b1      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ee      	beq.n	8003bba <HAL_RCC_OscConfig+0x37e>
 8003bdc:	e014      	b.n	8003c08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fe f89d 	bl	8001d1c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fe f899 	bl	8001d1c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e09b      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfc:	4b40      	ldr	r3, [pc, #256]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ee      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4a3b      	ldr	r2, [pc, #236]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8087 	beq.w	8003d32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c24:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d061      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d146      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c38:	4b33      	ldr	r3, [pc, #204]	@ (8003d08 <HAL_RCC_OscConfig+0x4cc>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe f86d 	bl	8001d1c <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fe f869 	bl	8001d1c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e06d      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c58:	4b29      	ldr	r3, [pc, #164]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6c:	d108      	bne.n	8003c80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c6e:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4921      	ldr	r1, [pc, #132]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c80:	4b1f      	ldr	r3, [pc, #124]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a19      	ldr	r1, [r3, #32]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	430b      	orrs	r3, r1
 8003c92:	491b      	ldr	r1, [pc, #108]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c98:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <HAL_RCC_OscConfig+0x4cc>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fe f83d 	bl	8001d1c <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe f839 	bl	8001d1c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e03d      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x46a>
 8003cc4:	e035      	b.n	8003d32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <HAL_RCC_OscConfig+0x4cc>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe f826 	bl	8001d1c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fe f822 	bl	8001d1c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e026      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x498>
 8003cf2:	e01e      	b.n	8003d32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e019      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40007000 	.word	0x40007000
 8003d08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <HAL_RCC_OscConfig+0x500>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000

08003d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0d0      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d54:	4b6a      	ldr	r3, [pc, #424]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d910      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d62:	4b67      	ldr	r3, [pc, #412]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 0207 	bic.w	r2, r3, #7
 8003d6a:	4965      	ldr	r1, [pc, #404]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b63      	ldr	r3, [pc, #396]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0b8      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d020      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d9c:	4b59      	ldr	r3, [pc, #356]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4a58      	ldr	r2, [pc, #352]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db4:	4b53      	ldr	r3, [pc, #332]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4a52      	ldr	r2, [pc, #328]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc0:	4b50      	ldr	r3, [pc, #320]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	494d      	ldr	r1, [pc, #308]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d040      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d107      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	4b47      	ldr	r3, [pc, #284]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d115      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfe:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e073      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06b      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1e:	4b39      	ldr	r3, [pc, #228]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f023 0203 	bic.w	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4936      	ldr	r1, [pc, #216]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e30:	f7fd ff74 	bl	8001d1c <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e38:	f7fd ff70 	bl	8001d1c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e053      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 020c 	and.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d1eb      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e60:	4b27      	ldr	r3, [pc, #156]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d210      	bcs.n	8003e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6e:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 0207 	bic.w	r2, r3, #7
 8003e76:	4922      	ldr	r1, [pc, #136]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b20      	ldr	r3, [pc, #128]	@ (8003f00 <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e032      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9c:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4916      	ldr	r1, [pc, #88]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eba:	4b12      	ldr	r3, [pc, #72]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	490e      	ldr	r1, [pc, #56]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ece:	f000 f821 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	490a      	ldr	r1, [pc, #40]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee0:	5ccb      	ldrb	r3, [r1, r3]
 8003ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee6:	4a09      	ldr	r2, [pc, #36]	@ (8003f0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eea:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x1d0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fed2 	bl	8001c98 <HAL_InitTick>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40022000 	.word	0x40022000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08004fc8 	.word	0x08004fc8
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	20000004 	.word	0x20000004

08003f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d002      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x30>
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_GetSysClockFreq+0x36>
 8003f42:	e027      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f44:	4b19      	ldr	r3, [pc, #100]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x98>)
 8003f46:	613b      	str	r3, [r7, #16]
      break;
 8003f48:	e027      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	0c9b      	lsrs	r3, r3, #18
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	4a17      	ldr	r2, [pc, #92]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f54:	5cd3      	ldrb	r3, [r2, r3]
 8003f56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d010      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f62:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	0c5b      	lsrs	r3, r3, #17
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	4a11      	ldr	r2, [pc, #68]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a0d      	ldr	r2, [pc, #52]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x98>)
 8003f76:	fb03 f202 	mul.w	r2, r3, r2
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	e004      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	613b      	str	r3, [r7, #16]
      break;
 8003f92:	e002      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b09      	ldr	r3, [pc, #36]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f96:	613b      	str	r3, [r7, #16]
      break;
 8003f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9a:	693b      	ldr	r3, [r7, #16]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	08004fe0 	.word	0x08004fe0
 8003fb4:	08004ff0 	.word	0x08004ff0
 8003fb8:	003d0900 	.word	0x003d0900
 8003fbc:	007a1200 	.word	0x007a1200

08003fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc4:	4b02      	ldr	r3, [pc, #8]	@ (8003fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	20000000 	.word	0x20000000

08003fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd8:	f7ff fff2 	bl	8003fc0 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	0adb      	lsrs	r3, r3, #11
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4903      	ldr	r1, [pc, #12]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08004fd8 	.word	0x08004fd8

08003ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004004:	4b0a      	ldr	r3, [pc, #40]	@ (8004030 <RCC_Delay+0x34>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <RCC_Delay+0x38>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	0a5b      	lsrs	r3, r3, #9
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004018:	bf00      	nop
  }
  while (Delay --);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1e5a      	subs	r2, r3, #1
 800401e:	60fa      	str	r2, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f9      	bne.n	8004018 <RCC_Delay+0x1c>
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	20000000 	.word	0x20000000
 8004034:	10624dd3 	.word	0x10624dd3

08004038 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d07d      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004054:	2300      	movs	r3, #0
 8004056:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004058:	4b4f      	ldr	r3, [pc, #316]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004064:	4b4c      	ldr	r3, [pc, #304]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	4a4b      	ldr	r2, [pc, #300]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800406e:	61d3      	str	r3, [r2, #28]
 8004070:	4b49      	ldr	r3, [pc, #292]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	4b46      	ldr	r3, [pc, #280]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d118      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408c:	4b43      	ldr	r3, [pc, #268]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a42      	ldr	r2, [pc, #264]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004096:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004098:	f7fd fe40 	bl	8001d1c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	e008      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7fd fe3c 	bl	8001d1c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	@ 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e06d      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b3a      	ldr	r3, [pc, #232]	@ (800419c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040be:	4b36      	ldr	r3, [pc, #216]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d02e      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d027      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e6:	4b2e      	ldr	r3, [pc, #184]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ec:	4b2c      	ldr	r3, [pc, #176]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040f2:	4a29      	ldr	r2, [pc, #164]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d014      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fd fe0b 	bl	8001d1c <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd fe07 	bl	8001d1c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e036      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412c:	4b1a      	ldr	r3, [pc, #104]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4917      	ldr	r1, [pc, #92]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	4313      	orrs	r3, r2
 800413c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d105      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004144:	4b14      	ldr	r3, [pc, #80]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	4a13      	ldr	r2, [pc, #76]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800414e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800415c:	4b0e      	ldr	r3, [pc, #56]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	490b      	ldr	r1, [pc, #44]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800417a:	4b07      	ldr	r3, [pc, #28]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4904      	ldr	r1, [pc, #16]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40007000 	.word	0x40007000
 80041a0:	42420440 	.word	0x42420440

080041a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	f200 8089 	bhi.w	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d045      	beq.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d074      	beq.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80041da:	e081      	b.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 80041dc:	4b45      	ldr	r3, [pc, #276]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80041e2:	4b44      	ldr	r3, [pc, #272]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d07a      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0c9b      	lsrs	r3, r3, #18
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	4a40      	ldr	r2, [pc, #256]	@ (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d015      	beq.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004206:	4b3b      	ldr	r3, [pc, #236]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	0c5b      	lsrs	r3, r3, #17
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	4a3a      	ldr	r2, [pc, #232]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00d      	beq.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004220:	4a37      	ldr	r2, [pc, #220]	@ (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	fbb2 f2f3 	udiv	r2, r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e004      	b.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4a33      	ldr	r2, [pc, #204]	@ (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800423c:	4b2d      	ldr	r3, [pc, #180]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004248:	d102      	bne.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	61bb      	str	r3, [r7, #24]
      break;
 800424e:	e049      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4a2c      	ldr	r2, [pc, #176]	@ (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	61bb      	str	r3, [r7, #24]
      break;
 800425e:	e041      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8004260:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800426c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004270:	d108      	bne.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800427c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e01e      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800428e:	d109      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004290:	4b18      	ldr	r3, [pc, #96]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800429c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e00e      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ae:	d11b      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 80042bc:	4b13      	ldr	r3, [pc, #76]	@ (800430c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042be:	61bb      	str	r3, [r7, #24]
      break;
 80042c0:	e012      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80042c2:	e011      	b.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042c4:	f7ff fe86 	bl	8003fd4 <HAL_RCC_GetPCLK2Freq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	0b9b      	lsrs	r3, r3, #14
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	3301      	adds	r3, #1
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	61bb      	str	r3, [r7, #24]
      break;
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80042e0:	bf00      	nop
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 80042e8:	bf00      	nop
    }
  }
  return (frequency);
 80042ea:	69bb      	ldr	r3, [r7, #24]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	08004ff4 	.word	0x08004ff4
 80042fc:	08005004 	.word	0x08005004
 8004300:	00f42400 	.word	0x00f42400
 8004304:	003d0900 	.word	0x003d0900
 8004308:	aaaaaaab 	.word	0xaaaaaaab
 800430c:	0001e848 	.word	0x0001e848

08004310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e041      	b.n	80043a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fd f9a6 	bl	8001688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f000 fa10 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e041      	b.n	8004444 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f839 	bl	800444c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f000 f9c1 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
	...

08004460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800447a:	2302      	movs	r3, #2
 800447c:	e0ae      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b0c      	cmp	r3, #12
 800448a:	f200 809f 	bhi.w	80045cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800448e:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044c9 	.word	0x080044c9
 8004498:	080045cd 	.word	0x080045cd
 800449c:	080045cd 	.word	0x080045cd
 80044a0:	080045cd 	.word	0x080045cd
 80044a4:	08004509 	.word	0x08004509
 80044a8:	080045cd 	.word	0x080045cd
 80044ac:	080045cd 	.word	0x080045cd
 80044b0:	080045cd 	.word	0x080045cd
 80044b4:	0800454b 	.word	0x0800454b
 80044b8:	080045cd 	.word	0x080045cd
 80044bc:	080045cd 	.word	0x080045cd
 80044c0:	080045cd 	.word	0x080045cd
 80044c4:	0800458b 	.word	0x0800458b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f9b2 	bl	8004838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6999      	ldr	r1, [r3, #24]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	619a      	str	r2, [r3, #24]
      break;
 8004506:	e064      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f9f8 	bl	8004904 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	619a      	str	r2, [r3, #24]
      break;
 8004548:	e043      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fa41 	bl	80049d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0208 	orr.w	r2, r2, #8
 8004564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0204 	bic.w	r2, r2, #4
 8004574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69d9      	ldr	r1, [r3, #28]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	61da      	str	r2, [r3, #28]
      break;
 8004588:	e023      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fa8b 	bl	8004aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	021a      	lsls	r2, r3, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	61da      	str	r2, [r3, #28]
      break;
 80045ca:	e002      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	75fb      	strb	r3, [r7, #23]
      break;
 80045d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045da:	7dfb      	ldrb	r3, [r7, #23]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_ConfigClockSource+0x1c>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0b4      	b.n	800476a <HAL_TIM_ConfigClockSource+0x186>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800461e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004638:	d03e      	beq.n	80046b8 <HAL_TIM_ConfigClockSource+0xd4>
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800463e:	f200 8087 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004646:	f000 8086 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x172>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464e:	d87f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b70      	cmp	r3, #112	@ 0x70
 8004652:	d01a      	beq.n	800468a <HAL_TIM_ConfigClockSource+0xa6>
 8004654:	2b70      	cmp	r3, #112	@ 0x70
 8004656:	d87b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b60      	cmp	r3, #96	@ 0x60
 800465a:	d050      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x11a>
 800465c:	2b60      	cmp	r3, #96	@ 0x60
 800465e:	d877      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b50      	cmp	r3, #80	@ 0x50
 8004662:	d03c      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xfa>
 8004664:	2b50      	cmp	r3, #80	@ 0x50
 8004666:	d873      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	d058      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x13a>
 800466c:	2b40      	cmp	r3, #64	@ 0x40
 800466e:	d86f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b30      	cmp	r3, #48	@ 0x30
 8004672:	d064      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004674:	2b30      	cmp	r3, #48	@ 0x30
 8004676:	d86b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d060      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 800467c:	2b20      	cmp	r3, #32
 800467e:	d867      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004684:	2b10      	cmp	r3, #16
 8004686:	d05a      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	e062      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800469a:	f000 facc 	bl	8004c36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	609a      	str	r2, [r3, #8]
      break;
 80046b6:	e04f      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c8:	f000 fab5 	bl	8004c36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046da:	609a      	str	r2, [r3, #8]
      break;
 80046dc:	e03c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 fa2c 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2150      	movs	r1, #80	@ 0x50
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fa83 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 80046fc:	e02c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800470a:	461a      	mov	r2, r3
 800470c:	f000 fa4a 	bl	8004ba4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2160      	movs	r1, #96	@ 0x60
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fa73 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 800471c:	e01c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	461a      	mov	r2, r3
 800472c:	f000 fa0c 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2140      	movs	r1, #64	@ 0x40
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fa63 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 800473c:	e00c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 fa5a 	bl	8004c02 <TIM_ITRx_SetConfig>
      break;
 800474e:	e003      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e000      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a29      	ldr	r2, [pc, #164]	@ (800482c <TIM_Base_SetConfig+0xb8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a26      	ldr	r2, [pc, #152]	@ (8004830 <TIM_Base_SetConfig+0xbc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a25      	ldr	r2, [pc, #148]	@ (8004834 <TIM_Base_SetConfig+0xc0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <TIM_Base_SetConfig+0xb8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a19      	ldr	r2, [pc, #100]	@ (8004830 <TIM_Base_SetConfig+0xbc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a18      	ldr	r2, [pc, #96]	@ (8004834 <TIM_Base_SetConfig+0xc0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a07      	ldr	r2, [pc, #28]	@ (800482c <TIM_Base_SetConfig+0xb8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]
}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800

08004838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f023 0201 	bic.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 0302 	bic.w	r3, r3, #2
 8004880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1c      	ldr	r2, [pc, #112]	@ (8004900 <TIM_OC1_SetConfig+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d10c      	bne.n	80048ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0308 	bic.w	r3, r3, #8
 800489a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 0304 	bic.w	r3, r3, #4
 80048ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <TIM_OC1_SetConfig+0xc8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40012c00 	.word	0x40012c00

08004904 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 0210 	bic.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f023 0320 	bic.w	r3, r3, #32
 800494e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a1d      	ldr	r2, [pc, #116]	@ (80049d4 <TIM_OC2_SetConfig+0xd0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10d      	bne.n	8004980 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <TIM_OC2_SetConfig+0xd0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d113      	bne.n	80049b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800498e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr
 80049d4:	40012c00 	.word	0x40012c00

080049d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa8 <TIM_OC3_SetConfig+0xd0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10d      	bne.n	8004a52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a14      	ldr	r2, [pc, #80]	@ (8004aa8 <TIM_OC3_SetConfig+0xd0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d113      	bne.n	8004a82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00

08004aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	031b      	lsls	r3, r3, #12
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0f      	ldr	r2, [pc, #60]	@ (8004b44 <TIM_OC4_SetConfig+0x98>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d109      	bne.n	8004b20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	40012c00 	.word	0x40012c00

08004b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 030a 	bic.w	r3, r3, #10
 8004b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0210 	bic.w	r2, r3, #16
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	031b      	lsls	r3, r3, #12
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004be0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f043 0307 	orr.w	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	021a      	lsls	r2, r3, #8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	609a      	str	r2, [r3, #8]
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_TIMEx_PWMN_Start+0x24>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e022      	b.n	8004cde <HAL_TIMEx_PWMN_Start+0x6a>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d109      	bne.n	8004cb2 <HAL_TIMEx_PWMN_Start+0x3e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e015      	b.n	8004cde <HAL_TIMEx_PWMN_Start+0x6a>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d109      	bne.n	8004ccc <HAL_TIMEx_PWMN_Start+0x58>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e008      	b.n	8004cde <HAL_TIMEx_PWMN_Start+0x6a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e059      	b.n	8004d9a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIMEx_PWMN_Start+0x82>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf4:	e013      	b.n	8004d1e <HAL_TIMEx_PWMN_Start+0xaa>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d104      	bne.n	8004d06 <HAL_TIMEx_PWMN_Start+0x92>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d04:	e00b      	b.n	8004d1e <HAL_TIMEx_PWMN_Start+0xaa>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d104      	bne.n	8004d16 <HAL_TIMEx_PWMN_Start+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d14:	e003      	b.n	8004d1e <HAL_TIMEx_PWMN_Start+0xaa>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2204      	movs	r2, #4
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f8f1 	bl	8004f0e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a18      	ldr	r2, [pc, #96]	@ (8004da4 <HAL_TIMEx_PWMN_Start+0x130>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_TIMEx_PWMN_Start+0xf0>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4e:	d009      	beq.n	8004d64 <HAL_TIMEx_PWMN_Start+0xf0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a14      	ldr	r2, [pc, #80]	@ (8004da8 <HAL_TIMEx_PWMN_Start+0x134>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_TIMEx_PWMN_Start+0xf0>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a13      	ldr	r2, [pc, #76]	@ (8004dac <HAL_TIMEx_PWMN_Start+0x138>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d111      	bne.n	8004d88 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d010      	beq.n	8004d98 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0201 	orr.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d86:	e007      	b.n	8004d98 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800

08004db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e046      	b.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a16      	ldr	r2, [pc, #88]	@ (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e14:	d009      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a12      	ldr	r2, [pc, #72]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a10      	ldr	r2, [pc, #64]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10c      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800

08004e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e03d      	b.n	8004f04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b087      	sub	sp, #28
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	2204      	movs	r2, #4
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	401a      	ands	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	431a      	orrs	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	621a      	str	r2, [r3, #32]
}
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <memset>:
 8004f56:	4603      	mov	r3, r0
 8004f58:	4402      	add	r2, r0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <memset+0xa>
 8004f5e:	4770      	bx	lr
 8004f60:	f803 1b01 	strb.w	r1, [r3], #1
 8004f64:	e7f9      	b.n	8004f5a <memset+0x4>
	...

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	4d0c      	ldr	r5, [pc, #48]	@ (8004fa0 <__libc_init_array+0x38>)
 8004f6e:	4c0d      	ldr	r4, [pc, #52]	@ (8004fa4 <__libc_init_array+0x3c>)
 8004f70:	1b64      	subs	r4, r4, r5
 8004f72:	10a4      	asrs	r4, r4, #2
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	f000 f81a 	bl	8004fb0 <_init>
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	4d0a      	ldr	r5, [pc, #40]	@ (8004fa8 <__libc_init_array+0x40>)
 8004f80:	4c0a      	ldr	r4, [pc, #40]	@ (8004fac <__libc_init_array+0x44>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	08005008 	.word	0x08005008
 8004fa4:	08005008 	.word	0x08005008
 8004fa8:	08005008 	.word	0x08005008
 8004fac:	0800500c 	.word	0x0800500c

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
